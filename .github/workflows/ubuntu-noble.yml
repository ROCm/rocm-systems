name: Ubuntu 24.04 (GCC, Python, ROCm)
run-name: ubuntu-noble

on:
  push:
    branches: [ amd-mainline, amd-staging, release/** ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'source/docs/**'
      - 'source/python/gui/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/cpack.yml'
      - '.github/workflows/containers.yml'
      - '.github/workflows/formatting.yml'
      - '.github/workflows/weekly-mainline-sync.yml'
      - 'docker/**'
      - .wordlist.txt
      - CMakePresets.json
  pull_request:
    branches: [ amd-mainline, amd-staging, release/** ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'source/docs/**'
      - 'source/python/gui/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/cpack.yml'
      - '.github/workflows/containers.yml'
      - '.github/workflows/formatting.yml'
      - '.github/workflows/weekly-mainline-sync.yml'
      - 'docker/**'
      - .wordlist.txt
      - CMakePresets.json

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ROCPROFSYS_CI: ON
  ROCPROFSYS_TMPDIR: "%env{PWD}%/testing-tmp"

jobs:
  ubuntu-noble:
    runs-on: ubuntu-latest
    container:
      image: dgaliffiamd/rocprofiler-systems:ci-base-ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler: ['g++']
        mpi: ['OFF']
        ompt: ['ON']
        papi: ['OFF']
        python: ['ON']
        strip: ['OFF']
        hidden: ['ON', 'OFF']
        build-type: ['Release']
        mpi-headers: ['ON', 'OFF']
        build-dyninst: ['ON']
        rocm-version: ['0.0', '6.3', '6.4']
    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      ROCPROFSYS_CI: 'ON'

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      timeout-minutes: 25
      uses: nick-fields/retry@v3
      with:
        retry_wait_seconds: 30
        timeout_minutes: 25
        max_attempts: 5
        command: |
          apt-get update &&
          apt-get upgrade -y &&
          apt-get install -y autoconf bison build-essential clang environment-modules \
            gettext libfabric-dev libiberty-dev libomp-dev libopenmpi-dev libtool m4 \
            openmpi-bin python3-pip texinfo

    - name: Install ROCm Packages
      if: ${{ matrix.rocm-version > 0 }}
      timeout-minutes: 115
      shell: bash
      run: |
        ROCM_VERSION=${{ matrix.rocm-version }}
        ROCM_MAJOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $1}')
        ROCM_MINOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $2}')
        ROCM_VERSN=$(( (${ROCM_MAJOR}*10000)+(${ROCM_MINOR}*100) ))
        echo "ROCM_MAJOR=${ROCM_MAJOR} ROCM_MINOR=${ROCM_MINOR} ROCM_VERSN=${ROCM_VERSN}"
        wget -q https://repo.radeon.com/amdgpu-install/${{ matrix.rocm-version }}/ubuntu/noble/amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get install -y ./amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get update
        apt-get install -y rocm-dev rocdecode-dev libavformat-dev libavcodec-dev

    - name: Configure, Build and Test
      timeout-minutes: 115
      shell: bash
      run: |
        git config --global --add safe.directory ${PWD} &&
        cmake --version
        USE_ROCM=OFF
        if [ "${{ matrix.rocm-version }}" != "0.0" ]; then
          CMAKE_PREFIX_PATH_ARG="-DCMAKE_PREFIX_PATH=/opt/rocm"
          '${{ matrix.compiler }}' --version
          USE_ROCM=ON
        else
          CMAKE_PREFIX_PATH_ARG=""
        fi
        TAG=""
        python3 ./scripts/run-ci.py -B build \
          --name ${{ github.repository_owner }}-${{ github.ref_name }}-ubuntu-noble-${{ matrix.compiler }}${TAG} \
          --build-jobs 2 \
          --site GitHub \
          -- \
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g') \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_INSTALL_PREFIX=/opt/rocprofiler-systems \
          -DROCPROFSYS_BUILD_TESTING=ON \
          -DROCPROFSYS_USE_MPI=${{ matrix.mpi }} \
          -DROCPROFSYS_USE_ROCM=$USE_ROCM \
          -DROCPROFSYS_USE_OMPT=${{ matrix.ompt }} \
          -DROCPROFSYS_USE_PAPI=${{ matrix.papi }} \
          -DROCPROFSYS_USE_PYTHON=${{ matrix.python }} \
          -DROCPROFSYS_USE_MPI_HEADERS=${{ matrix.mpi-headers }} \
          -DROCPROFSYS_BUILD_DYNINST=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_BOOST=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_TBB=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_ELFUTILS=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_LIBIBERTY=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_HIDDEN_VISIBILITY=${{ matrix.hidden }} \
          -DROCPROFSYS_PYTHON_PREFIX=/opt/conda/envs \
          -DROCPROFSYS_PYTHON_ENVS="py3.8;py3.9;py3.10;py3.11;py3.12;py3.13" \
          -DROCPROFSYS_STRIP_LIBRARIES=${{ matrix.strip }} \
          -DROCPROFSYS_MAX_THREADS=64 \
          -DROCPROFSYS_DISABLE_EXAMPLES="transpose;rccl;openmp-target;lulesh" \
          -DROCPROFSYS_BUILD_NUMBER=1 \
          -DUSE_CLANG_OMP=OFF \
          $CMAKE_PREFIX_PATH_ARG \
          -- \
          -LE "transpose|rccl|videodecode|jpegdecode|network"

    - name: Install
      timeout-minutes: 10
      run:
        cmake --build build --target install --parallel 2

    - name: CPack and Install
      run: |
        cd build
        cpack -G STGZ
        mkdir -p /opt/rocprofiler-systems
        ./rocprofiler-systems-*.sh --prefix=/opt/rocprofiler-systems --exclude-subdir --skip-license

    - name: Test Install with Modulefile
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        source /usr/share/modules/init/$(basename ${SHELL})
        module use /opt/rocprofiler-systems/share/modulefiles
        module avail
        module load rocprofiler-systems
        ./scripts/test-install.sh --test-rocprof-sys-{instrument,avail,sample,python,rewrite,runtime}=1

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ./scripts/test-find-package.sh --install-dir /opt/rocprofiler-systems

    - name: CTest Artifacts
      if: failure()
      continue-on-error: True
      uses: actions/upload-artifact@v4
      with:
        name: ctest-${{ github.job }}-${{ strategy.job-index }}-log
        path: |
          build/*.log

    - name: Data Artifacts
      if: failure()
      continue-on-error: True
      uses: actions/upload-artifact@v4
      with:
        name: data-${{ github.job }}-${{ strategy.job-index }}-files
        path: |
          build/rocprofsys-tests-config/*.cfg
          build/rocprofsys-tests-output/**/*.txt
          build/rocprofsys-tests-output/**/*-instr*.json
