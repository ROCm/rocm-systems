name: Packaging Installation Tests (rpm, deb)
run-name: packaging_installation

on:
  push:
    branches: [amd-staging, amd-mainline, release/**]
  pull_request:
    branches: [amd-staging, amd-mainline, release/**]

env:
  BUILD_DIR: './release'
  SOURCE_DIR: './source'
  INSTALL_DIR: '/opt/rocprofiler-systems'

jobs:
  packaging_installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [
          {os: 'ubuntu', os-release: '22.04', rocm-version: '6.4'},
          {os: 'ubuntu', os-release: '24.04', rocm-version: '6.4'},
          {os: 'rhel', os-release: '8.10', rocm-version: '6.4'},
          {os: 'rhel', os-release: '9.4', rocm-version: '6.4'},
          {os: 'rhel', os-release: '9.5', rocm-version: '6.4'},
          #{os: 'opensuse', os-release: '15.6', rocm-version: '6.4'}
        ]
    container:
      image: dgaliffiamd/rocprofiler-systems:ci-base-${{ matrix.system.os }}-${{ matrix.system.os-release }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure Env
      shell: bash
      run:
        echo "/opt/rocm/bin" >> $GITHUB_PATH  &&
        echo "ROCM_PATH=/opt/rocm" >> $GITHUB_ENV &&
        echo "LD_LIBRARY_PATH=/opt/rocm/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV &&
        echo "OS_VERSION_MAJOR=$(cat /etc/os-release | grep 'VERSION_ID' | sed 's/=/ /1' | awk '{print $NF}' | sed 's/"//g' | sed 's/\./ /g' | awk '{print $1}')" >> $GITHUB_ENV &&
        echo "ROCM_VERSION=${{ matrix.system.rocm-version }}" >> $GITHUB_ENV &&
        echo "ROCM_MAJOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $1}')" >> $GITHUB_ENV &&
        echo "ROCM_MINOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $2}')" >> $GITHUB_ENV &&
        echo "ROCM_VERSN=$((echo ${ROCM_MAJOR}*10000 + ${ROCM_MINOR}*100 ))" >> $GITHUB_ENV &&
        env

    - name: Setup ROCm (ubuntu)
      if: ${{ matrix.system.os == 'ubuntu'}}
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        wget -q https://repo.radeon.com/amdgpu-install/${{ matrix.system.rocm-version }}/${{ matrix.system.os }}/${{ contains(matrix.system.os-release, '22') && 'jammy' || 'noble' }}/amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get install -y ./amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get update
        apt-get install -y rocm-dev rocdecode-dev libavformat-dev libavcodec-dev

    - name: Setup ROCm (rhel)
      if: ${{ matrix.system.os == 'rhel'}}
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        RPM_TAG=".el${OS_VERSION_MAJOR}"
        if [ "${OS_VERSION_MAJOR}" -eq 8 ]; then PERL_REPO=powertools; else PERL_REPO=crb; fi
        dnf -y --enablerepo=${PERL_REPO} install perl-File-BaseDir
        dnf install -y https://repo.radeon.com/amdgpu-install/${{ matrix.system.rocm-version }}/${{ matrix.system.os }}/${{ matrix.system.os-release }}/amdgpu-install-${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1${RPM_TAG}.noarch.rpm
        dnf install -y rocm-dev rocdecode-devel python3-devel
        if [ "${OS_VERSION_MAJOR}" -gt 8 ]; then dnf install -y libavcodec-free-devel libavformat-free-devel; fi

    - name: Setup ROCm (opensuse)
      if: ${{ matrix.system.os == 'opensuse'}}
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        zypper install -y perl-File-BaseDir
        zypper --non-interactive --no-gpg-checks install https://repo.radeon.com/amdgpu-install/${{ matrix.system.rocm-version }}/sle/${{ matrix.system.os-release }}/amdgpu-install-${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1.noarch.rpm
        zypper --non-interactive install rocm-dev rocdecode-devel python3-devel

    - name: Build rocprofiler-systems
      timeout-minutes: 35
      shell: bash
      run: |
        set -v
        git config --global --add safe.directory ${PWD} &&
        cmake --preset release -B $BUILD_DIR -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCPACK_PACKAGING_INSTALL_PREFIX=$INSTALL_DIR
        cmake --build $BUILD_DIR --target all

    - name: Build and Install the Package
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        cd $BUILD_DIR
        DISTRO=${{ matrix.system.os }}
        if [ "${DISTRO}" -eq "ubuntu" ]; then PACKAGE=deb; else PACKAGE=rpm; fi
        if [ "${DISTRO}" -eq "ubuntu" ]; then PACKAGE_MANAGER=dpkg; fi
        if [ "${DISTRO}" -eq "rhel" ]; then PACKAGE_MANAGER=dnf; fi
        if [ "${DISTRO}" -eq "opensuse" ]; then PACKAGE_MANAGER=zypper; fi
        cpack -G ${PACKAGE}
        ${PACKAGE_MANAGER} ${{ matrix.system.os == 'ubuntu' && '-i' || 'install --skip-broken'}} *.${PACKAGE}

    - name: Verify Installation
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        echo "TO BE ADDED LATER"
