name: Packaging Installation Tests (RPM, DEB)
run-name: packaging_installation

on:
  push:
    branches: [amd-staging, amd-mainline, release/**]
  pull_request:
    branches: [amd-staging, amd-mainline, release/**]

env:
  BUILD_DIR: './release'
  SOURCE_DIR: './source'
  INSTALL_DIR: '/opt/rocprofiler-systems'

jobs:
  packaging_installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [
          #{os: 'ubuntu', os-release: '22.04', package: 'DEB', image: 'dgaliffiamd/rocprofiler-systems:ci-base-ubuntu-22.04', rocm-version: '6.4'},
          #{os: 'ubuntu', os-release: '24.04', package: 'DEB', image: 'dgaliffiamd/rocprofiler-systems:ci-base-ubuntu-24.04', rocm-version: '6.4'},
          {os: 'RHEL', os-release: '8.10', package: 'RPM', image: 'dgaliffiamd/rocprofiler-systems:ci-base-rhel-8.10', rocm-version: '6.4'},
          #{os: 'RHEL', os-release: '9.4', package: 'RPM', image: 'dgaliffiamd/rocprofiler-systems:ci-base-rhel-9.4', rocm-version: '6.4'},
          #{os: 'RHEL', os-release: '9.5', package: 'RPM', image: 'dgaliffiamd/rocprofiler-systems:ci-base-rhel-9.5', rocm-version: '6.4'},
          #{os: 'SLES', os-release: '15.5', package: 'RPM', image: 'dgaliffiamd/rocprofiler-systems:ci-base-opensuse-15.5', rocm-version: '6.4'},
          #{os: 'SLES', os-release: '15.6', package: 'RPM', image: 'dgaliffiamd/rocprofiler-systems:ci-base-opensuse-15.6', rocm-version: '6.4'}
        ]
    container:
      image: ${{ matrix.system.image }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure Env
      shell: bash
      run:
        echo "/opt/rocm/bin" >> $GITHUB_PATH  &&
        echo "ROCM_PATH=/opt/rocm" >> $GITHUB_ENV &&
        echo "LD_LIBRARY_PATH=/opt/rocm/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV &&
        echo "OS_VERSION_MAJOR=$(cat /etc/os-release | grep 'VERSION_ID' | sed 's/=/ /1' | awk '{print $NF}' | sed 's/"//g' | sed 's/\./ /g' | awk '{print $1}')" >> $GITHUB_ENV &&
        env

    - name: Install Packages
      shell: bash
      run: |
          if [ $OS_VERSION_MAJOR -eq 8 ]; then
            wget https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v47.0/linux-amd64/trace_processor_shell -P /opt/trace_processor/bin &&
            chmod +x /opt/trace_processor/bin/trace_processor_shell
          fi
          python3 -m pip install --upgrade pip &&
          python3 -m pip install --upgrade numpy perfetto dataclasses &&
          python3 -m pip install 'cmake==3.21' &&
          for i in 6 7 8 9 10 11; do /opt/conda/envs/py3.${i}/bin/python -m pip install --upgrade numpy perfetto dataclasses; done

    - name: Setup ROCm (deb)
      if: ${{ matrix.system.package == 'DEB'}}
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        ROCM_VERSION=${{ matrix.system.rocm-version }}
        ROCM_MAJOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $1}')
        ROCM_MINOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $2}')
        ROCM_VERSN=$(( (${ROCM_MAJOR}*10000)+(${ROCM_MINOR}*100) ))
        echo "ROCM_MAJOR=${ROCM_MAJOR} ROCM_MINOR=${ROCM_MINOR} ROCM_VERSN=${ROCM_VERSN}"
        wget -q https://repo.radeon.com/amdgpu-install/${{ matrix.system.rocm-version }}/ubuntu/${{ contains(matrix.system.os-release, '22') && 'jammy' || 'noble' }}/amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get install -y ./amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get update
        apt-get install -y rocm-dev rocdecode-dev libavformat-dev libavcodec-dev

    - name: Setup ROCm (rpm)
      if: ${{ matrix.system.package == 'RPM'}}
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        RPM_TAG=".el${OS_VERSION_MAJOR}"
        ROCM_VERSION=${{ matrix.system.rocm-version }}
        ROCM_MAJOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $1}')
        ROCM_MINOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $2}')
        ROCM_VERSN=$(( (${ROCM_MAJOR}*10000)+(${ROCM_MINOR}*100) ))
        if [ "${OS_VERSION_MAJOR}" -eq 8 ]; then PERL_REPO=powertools; else PERL_REPO=crb; fi
        dnf -y --enablerepo=${PERL_REPO} install perl-File-BaseDir
        yum install -y https://repo.radeon.com/amdgpu-install/${{ matrix.system.rocm-version }}/rhel/${{ matrix.system.os-release }}/amdgpu-install-${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1${RPM_TAG}.noarch.rpm
        yum install -y rocm-dev rocdecode-devel
        if [ "${OS_VERSION_MAJOR}" -gt 8 ]; then dnf install -y libavcodec-free-devel libavformat-free-devel; fi

    - name: Build rocprofiler-systems
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        git config --global --add safe.directory ${PWD} &&
        cmake --preset release -B $BUILD_DIR -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCPACK_PACKAGING_INSTALL_PREFIX=$INSTALL_DIR
        cmake --build $BUILD_DIR --target all

    - name: Build installer package
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        cd $BUILD_DIR
        cpack -G ${{ matrix.system.package }}

    - name: Install the package
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        dpkg -i *.{{ matrix.system.package == 'DEB' && 'deb' || 'rpm' }}

    - name: Verify installation
      timeout-minutes: 15
      shell: bash
      run: |
        set -v
        source /opt/rocprofiler-systems/share/rocprofiler-systems/setup-env.sh
        ./scripts/test-install.sh --test-rocprof-sys-{instrument,avail,sample,python,rewrite,runtime}=1
