name: ROCm Release Backward Compatibility Testing

on:
  workflow_dispatch:
  push:
    branches: [ amd-staging, amd-mainline ]
    paths-ignore:
      - '*.md'
      - '**/README.md'
      - 'source/docs/**'
      - 'CODEOWNERS'
  pull_request:
    paths-ignore:
      - '*.md'
      - '**/README.md'
      - 'source/docs/**'
      - 'CODEOWNERS'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # TODO(jrmadsen): replace LD_RUNPATH_FLAG, GPU_TARGETS, etc. with internal handling in cmake
  ROCM_PATH: "/opt/rocm"
  GPU_TARGETS: "gfx900 gfx906 gfx908 gfx90a gfx940 gfx941 gfx942 gfx1030 gfx1100 gfx1101 gfx1102 gfx1201"
  PATH: "/usr/bin:$PATH"
  CTEST_EXCLUDE_LABEL_REGEX: "^(pc-sampling)$"

jobs:
  core:
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04']
        build-type: ['RelWithDebInfo']
        ci-flags: ['--linter clang-tidy']

    runs-on: rocprof-azure-multi-release-emu-runner-set

    # define this for containers
    env:
      GIT_DISCOVERY_ACROSS_FILESYSTEM: 1
      CORE_EXT_RUNNER: current

    steps:
    - uses: actions/checkout@v4

    - name: Install requirements
      timeout-minutes: 10
      shell: bash
      run: |
        git config --global --add safe.directory '*'
        apt-get update
        apt-get install -y build-essential cmake g++-11 g++-12 python3-pip libdw-dev libsqlite3-dev
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
        python3 -m pip install -U --user -r requirements.txt
        rm -rf /opt/rocm*/lib/*rocprofiler-sdk* /opt/rocm*/lib/cmake/*rocprofiler-sdk* /opt/rocm*/share/*rocprofiler-sdk* /opt/rocm*/libexec/*rocprofiler-sdk*

    - name: List Files
      shell: bash
      run: |
        echo "PATH: ${PATH}"
        echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
        which-realpath() { echo -e "\n$1 resolves to $(realpath $(which $1))"; echo "$($(which $1) --version &> /dev/stdout | head -n 1)"; }
        for i in python3 git cmake ctest gcc g++ gcov; do which-realpath $i; done
        cat /opt/rocm*/.info/version
        ls -la

    - name: Configure, Build, and Test
      timeout-minutes: 30
      shell: bash
      run:
        python3 ./source/scripts/run-ci.py -B build
          --name ${{ github.repository }}-${{ github.ref_name }}-${{ matrix.os }}-rocm-${{ matrix.runner }}-core
          --build-jobs 16
          --site ${RUNNER_HOSTNAME}
          --gpu-targets ${{ env.GPU_TARGETS }}
          --run-attempt ${{ github.run_attempt }}
          ${{ matrix.ci-flags }}
          --
          -DROCPROFILER_DEP_ROCMCORE=ON
          -DROCPROFILER_BUILD_DOCS=OFF
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          -DCMAKE_INSTALL_PREFIX=/opt/rocprofiler-sdk
          -DCPACK_GENERATOR='DEB;RPM;TGZ'
          -DCPACK_PACKAGING_INSTALL_PREFIX="$(realpath /opt/rocm)"
          -DPython3_EXECUTABLE=$(which python3)
          --
          -LE "${CTEST_EXCLUDE_LABEL_REGEX}"
          -E "${CTEST_EXCLUDE_TESTS_REGEX}"

    - name: Install
      timeout-minutes: 10
      run:
        cmake --build build --target install --parallel 16

    - name: Test Install Build
      timeout-minutes: 20
      working-directory: /opt/rocprofiler-sdk/share/rocprofiler-sdk
      shell: bash
      run: |
        for ver in 6.2.1 6.2.4 6.3.4 6.4.1; do
          update-alternatives --set rocm /opt/rocm-$ver
          rm -rf build*
          CMAKE_PREFIX_PATH=/opt/rocprofiler-sdk cmake -B build-samples samples
          CMAKE_PREFIX_PATH=/opt/rocprofiler-sdk cmake -B build-tests tests
          export LD_LIBRARY_PATH=/opt/rocprofiler-sdk/lib:/opt/rocm-$ver:${LD_LIBRARY_PATH}
          cmake --build build-samples --target all --parallel 16
          cmake --build build-tests --target all --parallel 16
          ctest --test-dir build-samples -LE "${CTEST_EXCLUDE_LABEL_REGEX}" -E "${CTEST_EXCLUDE_TESTS_REGEX}" --output-on-failure
          ctest --test-dir build-tests -LE "${CTEST_EXCLUDE_LABEL_REGEX}" -E "${CTEST_EXCLUDE_TESTS_REGEX}" --output-on-failure
        done
