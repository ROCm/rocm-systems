name: Documentation

on:
  workflow_dispatch:
  push:
    branches: [ amd-staging, amd-mainline ]
    paths:
      - '*.md'
      - 'VERSION'
      - 'source/docs/**'
      - 'source/scripts/update-docs.sh'
      - 'source/include/rocprofiler-sdk/**'
      - '.github/workflows/docs.yml'
  pull_request:
    paths:
      - '*.md'
      - 'VERSION'
      - 'source/docs/**'
      - 'source/scripts/update-docs.sh'
      - 'source/include/rocprofiler-sdk/**'
      - '.github/workflows/docs.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GIT_DISCOVERY_ACROSS_FILESYSTEM: 1

jobs:
  build-docs:
    runs-on: AMD-ROCm-Internal-dev1
    container: continuumio/miniconda3
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        id: checkout
        continue-on-error: true
        with:
            submodules: true
      
      - name: Check Checkout Status
        if: ${{ steps.checkout.outcome == 'failure' }}
        run: |
          echo "FAILED_STEP=Checkout" >> $GITHUB_ENV
          echo "::warning::Checkout failed - remaining steps will be skipped"
          exit 0
      - name: Setup Pages
        if: ${{ env.FAILED_STEP == '' }}
        uses: actions/configure-pages@v5
      - name: Create Docs Directory
        if: ${{ env.FAILED_STEP == '' }}
        run: |
          git config --global --add safe.directory '*'
          mkdir -p docs/_doxygen/rocprofiler-sdk
          mkdir -p docs/_doxygen/roctx
      - name: Install documentation dependencies
        if: ${{ env.FAILED_STEP == '' }}
        timeout-minutes: 10
        shell: bash
        run: |
          apt-get update
          apt-get install -y doxygen graphviz build-essential cmake
      - name: Build Docs
        if: ${{ env.FAILED_STEP == '' }}
        shell: bash -el {0}
        working-directory: source/docs
        run: |
          conda init
          conda env create -n rocprofiler-docs -f environment.yml
          conda activate rocprofiler-docs
          python3 -m pip install sphinx
          python3 -m pip install doxysphinx rocm-docs-core
          git config --global --add safe.directory '*'
          ../scripts/update-docs.sh
      - name: Upload artifact
        if: ${{ github.event_name == 'workflow_dispatch' && env.FAILED_STEP == '' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy-docs:
    if: github.ref == 'refs/heads/amd-mainline'
    runs-on: AMD-ROCm-Internal-dev1
    needs: build-docs
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-docs-from-source:
    runs-on: AMD-ROCm-Internal-dev1
    container: rocm/dev-ubuntu-22.04:latest
    steps:
      - name: Install os essentials
        timeout-minutes: 10
        shell: bash
        continue-on-error: true
        run: |
          if ! sudo apt update || \
             ! sudo apt install -y software-properties-common || \
             ! sudo apt-add-repository ppa:git-core/ppa || \
             ! sudo apt-get update || \
             ! sudo apt-get install -y git; then
            echo "FAILED_STEP=Install os essentials" >> $GITHUB_ENV
            echo "::warning::Install os essentials failed - remaining steps will be skipped"
            exit 1
          fi
      - name: Checkout
        if: ${{ env.FAILED_STEP == '' }}
        uses: actions/checkout@v4
        id: checkout
        continue-on-error: true
        with:
            submodules: true
      
      - name: Check Checkout Status
        if: ${{ steps.checkout.outcome == 'failure' }}
        run: |
          echo "FAILED_STEP=Checkout" >> $GITHUB_ENV
          echo "::warning::Checkout failed - remaining steps will be skipped"
          exit 0
      - name: Create Docs Directory
        if: ${{ env.FAILED_STEP == '' }}
        continue-on-error: true
        run: |
          if ! git config --global --add safe.directory '*' || \
             ! mkdir -p source/docs/_doxygen/rocprofiler-sdk || \
             ! mkdir -p source/docs/_doxygen/roctx; then
            echo "FAILED_STEP=Create Docs Directory" >> $GITHUB_ENV
            echo "::warning::Create Docs Directory failed - remaining steps will be skipped"
            exit 1
          fi
      - name: Install requirements
        timeout-minutes: 10
        shell: bash
        continue-on-error: true
        run: |
          if ! git config --global --add safe.directory '*' || \
             ! sudo apt-get update || \
             ! sudo apt-get install -y cmake gcc g++ libdw-dev libsqlite3-dev rpm || \
             ! python3 -m pip install -r requirements.txt; then
            echo "FAILED_STEP=Install requirements" >> $GITHUB_ENV
            echo "::warning::Install requirements failed - remaining steps will be skipped"
            exit 1
          fi

      - name: Configure, Build, Install, and Package
        if: ${{ env.FAILED_STEP == '' }}
        timeout-minutes: 60
        shell: bash
        continue-on-error: true
        run: |
          if ! (git config --global --add safe.directory '*' && \
                export CMAKE_PREFIX_PATH=/opt/rocm:${CMAKE_PREFIX_PATH} && \
                cmake -B build \
                  -DROCPROFILER_DEP_ROCMCORE=ON \
                  -DROCPROFILER_BUILD_DOCS=ON \
                  -DCMAKE_INSTALL_PREFIX=/opt/rocprofiler-sdk \
                  -DCPACK_GENERATOR='DEB;RPM;TGZ' \
                  -DCPACK_PACKAGING_INSTALL_PREFIX="$(realpath /opt/rocm)" \
                  -DPython3_EXECUTABLE=$(which python3) \
                  . && \
                cmake --build build --target docs --parallel 4 && \
                cmake --build build --target all --parallel 12 && \
                sudo cmake --build build --target install --parallel 12 && \
                cmake --build build --target package --parallel 12); then
            echo "FAILED_STEP=Configure, Build, Install, and Package" >> $GITHUB_ENV
            echo "::warning::Configure, Build, Install, and Package failed - remaining steps will be skipped"
            exit 1
          fi
      - name: Final Status Check
        if: always()
        shell: bash
        run: |
          if [[ "${{ env.FAILED_STEP }}" == "Checkout" ]] || [[ "${{ env.FAILED_STEP }}" == "Install os essentials" ]] || [[ "${{ env.FAILED_STEP }}" == "Install requirements" ]]; then
            echo "::notice::✅ TEST PASSED - Job failed at ${{ env.FAILED_STEP }} step"
            echo "::notice::Since the failure occurred during ${{ env.FAILED_STEP }}, this is considered a passing test"
            echo "## Test Result: PASSED ✅" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Failed at ${{ env.FAILED_STEP }} step (acceptable failure)" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** Job marked as successful" >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [[ "${{ env.FAILED_STEP }}" == "" ]]; then
            echo "::notice::✅ TEST PASSED - All steps completed successfully"
            echo "## Test Result: PASSED ✅" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** All steps completed successfully" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "::error::❌ TEST FAILED - Job failed at step: ${{ env.FAILED_STEP }}"
            echo "::error::Failure occurred after Install requirements, this is a real test failure"
            echo "## Test Result: FAILED ❌" >> $GITHUB_STEP_SUMMARY
            echo "**Failed at step:** ${{ env.FAILED_STEP }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** Job marked as failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
