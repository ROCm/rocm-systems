name: "CodeQL Advanced Analysis"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - amd-staging
    paths-ignore:
      - '*.md'
      - 'source/docs/**'
      - 'CODEOWNERS'

  push:
    branches:
      - amd-staging
    paths-ignore:
      - '*.md'
      - 'source/docs/**'
      - 'CODEOWNERS'

env:
  ROCM_PATH: "/opt/rocm"
  GPU_TARGETS: "gfx900;gfx906;gfx908;gfx90a;gfx940;gfx941;gfx942;gfx950;gfx1030;gfx1100;gfx1101;gfx1102;gfx1201"
  PATH: "/usr/bin:$PATH"
  EXCLUDED_PATHS: "external /tmp/build/external"
  GLOBAL_CMAKE_OPTIONS: "-DROCPROFILER_INTERNAL_RCCL_API_TRACE=ON"

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: AMD-ROCm-Internal-dev1

    container: rocm/dev-ubuntu-22.04:latest
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: cpp
          build-mode: manual
        - language: python
          build-mode: none
        - language : actions
          build-mode: none
    steps:
    - name: Install requirements
      timeout-minutes: 10
      shell: bash
      continue-on-error: true
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if ! sudo apt update || \
           ! sudo apt install -y software-properties-common || \
           ! sudo apt-add-repository ppa:git-core/ppa || \
           ! sudo apt-get update || \
           ! sudo apt-get install -y git build-essential cmake g++-11 g++-12 python3-pip libdw-dev libsqlite3-dev rccl-dev rocdecode-dev rocjpeg-dev || \
           ! git config --global --add safe.directory '*' || \
           ! sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11 || \
           ! sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12; then
          echo "FAILED_STEP=Install requirements" >> $GITHUB_ENV
          echo "::warning::Install requirements failed - remaining steps will be skipped"
          exit 1
        fi

    - uses: actions/checkout@v4
      id: checkout
      if: ${{ env.FAILED_STEP == '' }}
      continue-on-error: true
      with:
        submodules: 'true'

    - name: Check Checkout Status
      if: ${{ steps.checkout.outcome == 'failure' }}
      run: |
        echo "FAILED_STEP=Checkout" >> $GITHUB_ENV
        echo "::warning::Checkout failed - remaining steps will be skipped"
        exit 0

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      if: ${{ env.FAILED_STEP == '' }}
      continue-on-error: true
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: security-extended

    - name: Configure and Build
      if: ${{ env.FAILED_STEP == '' }}
      timeout-minutes: 30
      shell: bash
      continue-on-error: true
      run: |
        if ! python3 -m pip install -r requirements.txt || \
           ! cmake -B /tmp/build -DCMAKE_PREFIX_PATH=/opt/rocm ${{ env.GLOBAL_CMAKE_OPTIONS }} -DPython3_EXECUTABLE=$(which python3) . || \
           ! cmake --build /tmp/build --target all --parallel 16 || \
           ! rm -rf ${EXCLUDED_PATHS}; then
          echo "FAILED_STEP=Configure and Build" >> $GITHUB_ENV
          echo "::warning::Configure and Build failed - remaining steps will be skipped"
          exit 1
        fi

    - name: Perform CodeQL Analysis
      if: ${{ env.FAILED_STEP == '' }}
      continue-on-error: true
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Final Status Check
      if: always()
      shell: bash
      run: |
        if [[ "${{ env.FAILED_STEP }}" == "Checkout" ]] || [[ "${{ env.FAILED_STEP }}" == "Install requirements" ]]; then
          echo "::notice::✅ TEST PASSED - Job failed at Install requirements step"
          echo "::notice::Since the failure occurred during Install requirements, this is considered a passing test"
          echo "## Test Result: PASSED ✅" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Failed at Install requirements step (acceptable failure)" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Job marked as successful" >> $GITHUB_STEP_SUMMARY
          exit 0
        elif [[ "${{ env.FAILED_STEP }}" == "" ]]; then
          echo "::notice::✅ TEST PASSED - All steps completed successfully"
          echo "## Test Result: PASSED ✅" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All steps completed successfully" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "::error::❌ TEST FAILED - Job failed at step: ${{ env.FAILED_STEP }}"
          echo "::error::Failure occurred after Install requirements, this is a real test failure"
          echo "## Test Result: FAILED ❌" >> $GITHUB_STEP_SUMMARY
          echo "**Failed at step:** ${{ env.FAILED_STEP }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Job marked as failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
