name: ubuntu-focal-external

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  OMNITRACE_VERBOSE: 1
  OMNITRACE_CI: ON

jobs:
  ubuntu-focal-external:
    runs-on: ubuntu-20.04
    container:
      image: jrmadsen/omnitrace-ci:ubuntu-20.04
    strategy:
      matrix:
        compiler: ['g++-7', 'g++-8']
        lto: ['OFF']
        strip: ['OFF']
        python: ['ON']
        build-type: ['Release']
        mpi-headers: ['OFF']
        static-libgcc: ['OFF']
        static-libstdcxx: ['OFF']
        include:
          - compiler: 'g++-9'
            lto: 'OFF'
            strip: 'ON'
            python: 'OFF'
            build-type: 'Release'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'ON'
          - compiler: 'g++-10'
            lto: 'OFF'
            strip: 'ON'
            python: 'ON'
            build-type: 'RelWithDebInfo'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'OFF'
          - compiler: 'g++-11'
            lto: 'ON'
            strip: 'ON'
            python: 'OFF'
            build-type: 'Release'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'OFF'

    steps:
    - uses: actions/checkout@v2

    - name: Install Packages
      timeout-minutes: 5
      run:
        apt-get update &&
        apt-get install -y software-properties-common &&
        add-apt-repository -y ppa:ubuntu-toolchain-r/test &&
        apt-get update &&
        apt-get upgrade -y &&
        apt-get install -y build-essential m4 autoconf libtool python3-pip libiberty-dev clang libomp-dev ${{ matrix.compiler }} &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install numpy &&
        python3 -m pip install 'cmake==3.16.3' &&
        for i in 6 7 8 9; do /opt/conda/envs/py3.${i}/bin/python -m pip install numpy; done

    - name: Configure Env
      run:
        echo "CC=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')" >> $GITHUB_ENV &&
        echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV &&
        echo "/opt/omnitrace/bin:${HOME}/.local/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=/opt/omnitrace/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

    - name: Configure CMake
      timeout-minutes: 5
      run:
        git config --global --add safe.directory ${PWD} &&
        cmake --version &&
        cmake -B build
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          -DCMAKE_INSTALL_PREFIX=/opt/omnitrace
          -DOMNITRACE_BUILD_TESTING=ON
          -DOMNITRACE_USE_MPI=OFF
          -DOMNITRACE_USE_HIP=OFF
          -DOMNITRACE_USE_OMPT=OFF
          -DOMNITRACE_USE_PAPI=OFF
          -DOMNITRACE_USE_PYTHON=${{ matrix.python }}
          -DOMNITRACE_USE_MPI_HEADERS=${{ matrix.mpi-headers }}
          -DOMNITRACE_STRIP_LIBRARIES=${{ matrix.strip }}
          -DOMNITRACE_BUILD_LTO=${{ matrix.lto }}
          -DOMNITRACE_BUILD_STATIC_LIBGCC=${{ matrix.static-libgcc }}
          -DOMNITRACE_BUILD_STATIC_LIBSTDCXX=${{ matrix.static-libstdcxx }}
          -DOMNITRACE_PYTHON_PREFIX=/opt/conda/envs
          -DOMNITRACE_PYTHON_ENVS="py3.6;py3.7;py3.8;py3.9"

    - name: Build
      timeout-minutes: 60
      run:
        cmake --build build --target all --parallel 2 -- VERBOSE=1

    - name: Install
      timeout-minutes: 5
      run:
        cmake --build build --target install --parallel 2

    - name: Test
      timeout-minutes: 45
      run:
        cd build &&
        ldd ./omnitrace &&
        ./omnitrace --help &&
        ctest -V -N -O omnitrace-ctest-${{ github.job }}-commands.log &&
        ctest -V --output-log omnitrace-ctest-${{ github.job }}.log --stop-on-failure

    - name: Test Install
      timeout-minutes: 10
      run: |
        set -v
        export OMNITRACE_DEBUG=ON
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o ls.inst --simulate -- ls
        for i in omnitrace-ls.inst-output/*; do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -o ls.inst -- ls
        ./ls.inst
        omnitrace -e -v 1 --simulate -- ls
        for i in omnitrace-ls-output/*; do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -- ls

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ./scripts/test-find-package.sh --install-dir /opt/omnitrace

    - name: CTest Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ctest-${{ github.job }}-log
        path: |
          build/*.log

    - name: Data Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: data-${{ github.job }}-files
        path: |
          build/omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-output/**/*-instr*.json
