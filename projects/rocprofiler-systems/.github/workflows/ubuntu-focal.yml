name: Ubuntu 20.04 (GCC, Python, ROCm, MPICH, OpenMPI)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OMNITRACE_VERBOSE: 1
  OMNITRACE_CI: ON

jobs:
  ubuntu-focal-external:
    runs-on: ubuntu-20.04
    container:
      image: jrmadsen/omnitrace:ci-base-ubuntu-20.04
    strategy:
      matrix:
        compiler: ['g++-7', 'g++-8']
        lto: ['OFF']
        strip: ['OFF']
        python: ['ON']
        build-type: ['Release']
        mpi-headers: ['OFF']
        static-libgcc: ['OFF']
        static-libstdcxx: ['OFF']
        include:
          - compiler: 'g++-9'
            lto: 'OFF'
            strip: 'ON'
            python: 'OFF'
            build-type: 'Release'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'ON'
          - compiler: 'g++-10'
            lto: 'OFF'
            strip: 'ON'
            python: 'ON'
            build-type: 'Release'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'OFF'
          - compiler: 'g++-11'
            lto: 'ON'
            strip: 'ON'
            python: 'OFF'
            build-type: 'Release'
            mpi-headers: 'ON'
            static-libgcc: 'ON'
            static-libstdcxx: 'OFF'

    steps:
    - uses: actions/checkout@v2

    - name: Install Packages
      timeout-minutes: 10
      run:
        apt-get update &&
        apt-get install -y software-properties-common &&
        add-apt-repository -y ppa:ubuntu-toolchain-r/test &&
        apt-get update &&
        apt-get upgrade -y &&
        apt-get install -y build-essential m4 autoconf libtool python3-pip libiberty-dev clang libomp-dev libmpich-dev mpich ${{ matrix.compiler }} &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install numpy &&
        python3 -m pip install perfetto &&
        python3 -m pip install 'cmake==3.16.3' &&
        for i in 6 7 8 9 10; do /opt/conda/envs/py3.${i}/bin/python -m pip install numpy perfetto dataclasses; done

    - name: Configure Env
      run:
        echo "CC=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')" >> $GITHUB_ENV &&
        echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV &&
        echo "/opt/omnitrace/bin:${HOME}/.local/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=/opt/omnitrace/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

    - name: Configure CMake
      timeout-minutes: 10
      run:
        git config --global --add safe.directory ${PWD} &&
        cmake --version &&
        cmake -B build
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          -DCMAKE_INSTALL_PREFIX=/opt/omnitrace
          -DOMNITRACE_BUILD_TESTING=ON
          -DOMNITRACE_USE_MPI=OFF
          -DOMNITRACE_USE_HIP=OFF
          -DOMNITRACE_USE_OMPT=OFF
          -DOMNITRACE_USE_PAPI=OFF
          -DOMNITRACE_USE_PYTHON=${{ matrix.python }}
          -DOMNITRACE_USE_MPI_HEADERS=${{ matrix.mpi-headers }}
          -DOMNITRACE_STRIP_LIBRARIES=${{ matrix.strip }}
          -DOMNITRACE_BUILD_LTO=${{ matrix.lto }}
          -DOMNITRACE_BUILD_STATIC_LIBGCC=${{ matrix.static-libgcc }}
          -DOMNITRACE_BUILD_STATIC_LIBSTDCXX=${{ matrix.static-libstdcxx }}
          -DOMNITRACE_PYTHON_PREFIX=/opt/conda/envs
          -DOMNITRACE_PYTHON_ENVS="py3.6;py3.7;py3.8;py3.9;py3.10"
          -DOMNITRACE_MAX_THREADS=32

    - name: Build
      timeout-minutes: 60
      run:
        cmake --build build --target all --parallel 2 -- VERBOSE=1

    - name: Install
      timeout-minutes: 10
      run:
        cmake --build build --target install --parallel 2

    - name: Test
      timeout-minutes: 45
      run:
        cd build &&
        ldd ./bin/omnitrace &&
        ./bin/omnitrace --help &&
        ctest -V -N -O omnitrace-ctest-${{ github.job }}-commands.log &&
        ctest -V --output-log omnitrace-ctest-${{ github.job }}.log --stop-on-failure

    - name: Test Install
      timeout-minutes: 10
      run: |
        set -v
        export OMNITRACE_DEBUG=ON
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o ls.inst --simulate -- ls
        for i in $(find omnitrace-ls.inst-output -type f); do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -o ls.inst -- ls
        ./ls.inst
        omnitrace -e -v 1 --simulate -- ls
        for i in $(find omnitrace-ls-output -type f); do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -- ls

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ./scripts/test-find-package.sh --install-dir /opt/omnitrace

    - name: CTest Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ctest-${{ github.job }}-log
        path: |
          build/*.log

    - name: Data Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: data-${{ github.job }}-files
        path: |
          build/omnitrace-tests-config/*.cfg
          build/omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-output/**/*-instr*.json

    - name: Kill Perfetto
      if: success() || failure()
      continue-on-error: True
      run: |
        set +e
        RUNNING_PROCS=$(pgrep trace_processor_shell)
        if [ -n "${RUNNING_PROCS}" ]; then kill -s 9 ${RUNNING_PROCS}; fi

  ubuntu-focal-external-rocm:
    runs-on: ubuntu-20.04
    container:
      image: jrmadsen/omnitrace:ci-base-ubuntu-20.04
    strategy:
      matrix:
        compiler: ['g++']
        rocm_version: ['4.3', '4.5', '5.0']
        mpi_headers: ['OFF']
        build_jobs: ['4']
        ctest_exclude: ['-LE "mpi-example|transpose"']
        perfetto-tools: ['ON']
        include:
          - compiler: 'g++'
            rocm_version: 'debian'
            mpi_headers: 'ON'
            build_jobs: '2'
            ctest_exclude: '-LE transpose'
            perfetto-tools: 'OFF'

    env:
      BUILD_TYPE: MinSizeRel
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

    steps:
    - uses: actions/checkout@v2

    - name: Install Packages
      timeout-minutes: 10
      run:
        apt-get update &&
        apt-get install -y software-properties-common wget gnupg2 &&
        wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - &&
        echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{ matrix.rocm_version }}/ ubuntu main" | tee /etc/apt/sources.list.d/rocm.list &&
        apt-get update &&
        apt-get install -y build-essential m4 autoconf libtool python3-pip clang libomp-dev ${{ matrix.compiler }} libudev-dev libnuma-dev rocm-dev rocm-utils rocm-smi-lib roctracer-dev rocprofiler-dev hip-base hsa-amd-aqlprofile hsa-rocr-dev hsakmt-roct-dev libpapi-dev curl libopenmpi-dev openmpi-bin libfabric-dev &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install 'cmake==3.21.4' &&
        for i in 6 7 8 9 10; do /opt/conda/envs/py3.${i}/bin/python -m pip install numpy perfetto dataclasses; done

    - name: Install RCCL
      if: ${{ matrix.rocm_version != '4.3' }}
      timeout-minutes: 10
      run:
        apt-get install -y rccl-dev

    - name: Configure Env
      run: |
        echo "CC=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=/opt/dyninst:${CMAKE_PREFIX_PATH}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/opt/rocm/lib:/usr/local/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        cat << EOF > test-install.cfg
        OMNITRACE_USE_TIMEMORY          = ON
        OMNITRACE_USE_PERFETTO          = ON
        OMNITRACE_USE_PID               = OFF
        OMNITRACE_USE_SAMPLING          = OFF
        OMNITRACE_USE_PROCESS_SAMPLING  = OFF
        OMNITRACE_COUT_OUTPUT           = ON
        OMNITRACE_TIME_OUTPUT           = OFF
        OMNITRACE_TIMEMORY_COMPONENTS   = cpu_clock cpu_util current_peak_rss kernel_mode_time monotonic_clock monotonic_raw_clock network_stats num_io_in num_io_out num_major_page_faults num_minor_page_faults page_rss peak_rss priority_context_switch process_cpu_clock process_cpu_util read_bytes read_char system_clock thread_cpu_clock thread_cpu_util timestamp trip_count user_clock user_mode_time virtual_memory voluntary_context_switch wall_clock written_bytes written_char
        OMNITRACE_OUTPUT_PATH           = omnitrace-tests-output
        OMNITRACE_OUTPUT_PREFIX         = %tag%/
        OMNITRACE_DEBUG                 = OFF
        OMNITRACE_VERBOSE               = 3
        OMNITRACE_DL_VERBOSE            = 3
        OMNITRACE_PERFETTO_BACKEND      = system
        EOF
        realpath test-install.cfg
        cat test-install.cfg

    - name: Configure CMake
      timeout-minutes: 10
      run:
        git config --global --add safe.directory ${PWD} &&
        cmake --version &&
        cmake -B build
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=/opt/omnitrace
          -DOMNITRACE_BUILD_TESTING=ON
          -DOMNITRACE_BUILD_DEVELOPER=ON
          -DOMNITRACE_BUILD_EXTRA_OPTIMIZATIONS=OFF
          -DOMNITRACE_BUILD_LTO=OFF
          -DOMNITRACE_USE_MPI=OFF
          -DOMNITRACE_USE_HIP=ON
          -DOMNITRACE_MAX_THREADS=32
          -DOMNITRACE_USE_PAPI=OFF
          -DOMNITRACE_USE_OMPT=OFF
          -DOMNITRACE_USE_PYTHON=ON
          -DOMNITRACE_USE_MPI_HEADERS=${{ matrix.mpi_headers }}
          -DOMNITRACE_USE_SANITIZER=OFF
          -DOMNITRACE_INSTALL_PERFETTO_TOOLS=${{ matrix.perfetto-tools }}
          -DOMNITRACE_PYTHON_PREFIX=/opt/conda/envs
          -DOMNITRACE_PYTHON_ENVS="py3.6;py3.7;py3.8;py3.9;py3.10"
          -DOMNITRACE_CI_MPI_RUN_AS_ROOT=${{ matrix.mpi_headers }}
          -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=OFF

    - name: Build
      timeout-minutes: 60
      run:
        cmake --build build --target all --parallel ${{ matrix.build_jobs }} -- VERBOSE=1

    - name: Install
      run:
        cmake --build build --target install --parallel 2

    - name: Test
      timeout-minutes: 45
      run:
        cd build &&
        ldd ./bin/omnitrace &&
        ./bin/omnitrace --help &&
        ctest -V ${{ matrix.ctest_exclude }} -N -O omnitrace-ctest-${{ github.job }}-commands.log &&
        ctest -V ${{ matrix.ctest_exclude }} --output-log omnitrace-ctest-${{ github.job }}.log --stop-on-failure

    - name: Configure Install Env
      run: |
        echo "/opt/omnitrace/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=/opt/omnitrace/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "OMNITRACE_CONFIG_FILE=test-install.cfg" >> $GITHUB_ENV

    - name: Test Install
      timeout-minutes: 10
      if: ${{ matrix.perfetto-tools == 'ON' }}
      run: |
        set -v
        cat ${OMNITRACE_CONFIG_FILE}
        omnitrace-perfetto-traced --background
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-python
        omnitrace-python --help
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o ls.inst --simulate -- ls
        omnitrace -e -v 1 --simulate -- ls
        omnitrace -e -v 1 -o ls.inst -- ls
        omnitrace-perfetto --out ls-perfetto-trace.proto --txt -c omnitrace.cfg
        ./ls.inst
        omnitrace -e -v 1 -- ls
        du -m ls-perfetto-trace.proto
        /opt/conda/envs/py3.8/bin/python ./tests/validate-perfetto-proto.py -p -i ./ls-perfetto-trace.proto

    - name: Test Install
      timeout-minutes: 10
      if: ${{ matrix.perfetto-tools == 'OFF' }}
      run: |
        set -v
        cat ${OMNITRACE_CONFIG_FILE}
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-python
        omnitrace-python --help
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o sleep.inst --simulate -- sleep
        omnitrace -e -v 1 --simulate -- sleep
        omnitrace -e -v 1 -o sleep.inst -- sleep
        ./sleep.inst 5
        omnitrace -e -v 1 -- sleep 5
        cat omnitrace-tests-output/sleep.inst/wall_clock.txt
        cat omnitrace-tests-output/sleep/wall_clock.txt

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ./scripts/test-find-package.sh --install-dir /opt/omnitrace

    - name: CTest Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ctest-${{ github.job }}-log
        path: |
          build/*.log

    - name: Data Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: data-${{ github.job }}-files
        path: |
          omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-config/*.cfg
          build/omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-output/**/*-instr*.json

    - name: Kill Perfetto
      if: success() || failure()
      continue-on-error: True
      run: |
        set +e
        RUNNING_PROCS=$(pgrep trace_processor_shell)
        if [ -n "${RUNNING_PROCS}" ]; then kill -s 9 ${RUNNING_PROCS}; fi

  ubuntu-focal:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler: ['g++']
        mpi: [ '', 'libmpich-dev mpich', 'libopenmpi-dev openmpi-bin libfabric-dev' ]
        boost: ['OFF']
        tbb: ['OFF']
        build-type: ['Release']
        python: ['ON']
        ompt: ['ON']
        papi: ['ON']
        deps: ['libtbb-dev libboost-{atomic,system,thread,date-time,filesystem,timer}-dev']
        include:
        - compiler: 'g++'
          mpi: ''
          boost: 'ON'
          tbb: 'ON'
          build-type: 'Release'
          python: 'ON'
          ompt: 'OFF'
          papi: 'OFF'
          deps: ''

    env:
      ELFUTILS_DOWNLOAD_VERSION: 0.186
      OMNITRACE_VERBOSE: 1
      OMNITRACE_CI: ON

    steps:
    - uses: actions/checkout@v2

    - name: Install Packages
      timeout-minutes: 10
      run:
        sudo apt-get update &&
        sudo apt-get install -y build-essential m4 autoconf libtool python3-pip ${{ matrix.deps }} clang libomp-dev ${{ matrix.compiler }} ${{ matrix.mpi }} &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install numpy &&
        python3 -m pip install perfetto &&
        python3 -m pip install 'cmake==3.16.3'

    - name: Configure Env
      run:
        echo "CC=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')" >> $GITHUB_ENV &&
        echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV &&
        echo "${HOME}/.local/bin" >> $GITHUB_PATH

    - name: Configure CMake
      timeout-minutes: 10
      run:
        cmake --version &&
        if [ -z "${{ matrix.mpi }}" ]; then USE_MPI=OFF; else USE_MPI=ON; fi &&
        cmake -B ${{ github.workspace }}/build
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          -DCMAKE_INSTALL_PREFIX=/opt/omnitrace
          -DOMNITRACE_BUILD_TESTING=ON
          -DOMNITRACE_BUILD_DYNINST=ON
          -DOMNITRACE_USE_MPI=${USE_MPI}
          -DOMNITRACE_USE_HIP=OFF
          -DOMNITRACE_USE_PYTHON=${{ matrix.python }}
          -DOMNITRACE_USE_OMPT=${{ matrix.ompt }}
          -DOMNITRACE_USE_PAPI=${{ matrix.papi }}
          -DDYNINST_BUILD_ELFUTILS=ON
          -DDYNINST_BUILD_LIBIBERTY=ON
          -DDYNINST_BUILD_TBB=${{ matrix.tbb }}
          -DDYNINST_BUILD_BOOST=${{ matrix.boost }}
          -DDYNINST_BUILD_SHARED_LIBS=ON
          -DDYNINST_BUILD_STATIC_LIBS=OFF
          -DDYNINST_ELFUTILS_DOWNLOAD_VERSION=${{ env.ELFUTILS_DOWNLOAD_VERSION }}
          -DOMNITRACE_MAX_THREADS=32

    - name: Build
      timeout-minutes: 60
      run:
        cmake --build ${{ github.workspace }}/build --target all --parallel 2 -- VERBOSE=1

    - name: Test
      timeout-minutes: 45
      working-directory: ${{ github.workspace }}/build
      run:
        ctest -V -N -O ${{ github.workspace }}/build/omnitrace-ctest-${{ github.job }}-commands.log &&
        ctest -V --output-log ${{ github.workspace }}/build/omnitrace-ctest-${{ github.job }}.log --stop-on-failure

    - name: Install
      working-directory: ${{ github.workspace }}/build
      run: |
        cpack -G STGZ
        mkdir -p /opt/omnitrace
        ./omnitrace-*.sh --prefix=/opt/omnitrace --exclude-subdir --skip-license

    - name: Test Install
      timeout-minutes: 15
      run: |
        set -v
        source /opt/omnitrace/share/omnitrace/setup-env.sh
        cat << EOF > ${HOME}/.omnitrace.cfg
        OMNITRACE_VERBOSE = 2
        OMNITRACE_USE_TIMEMORY = ON
        OMNITRACE_USE_PERFETTO = ON
        OMNITRACE_USE_SAMPLING = ON
        OMNITRACE_USE_PROCESS_SAMPLING = ON
        OMNITRACE_OUTPUT_PATH = omnitrace-tests-output
        OMNITRACE_OUTPUT_PREFIX = %tag%/
        OMNITRACE_SAMPLING_FREQ = 50
        OMNITRACE_SAMPLING_DELAY = 0.05
        EOF
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace-python
        omnitrace-python --help
        omnitrace-python -b -- ${{ github.workspace }}/examples/python/builtin.py
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o ls.inst --simulate -- ls
        for i in $(find omnitrace-tests-output/ls.inst -type f); do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -o ls.inst -- ls
        ./ls.inst
        omnitrace -e -v 1 --simulate -- ls
        for i in $(find omnitrace-tests-output/ls -type f); do echo -e "\n\n --> ${i} \n\n"; cat ${i}; done
        omnitrace -e -v 1 -- ls

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ${{ github.workspace }}/scripts/test-find-package.sh --install-dir /opt/omnitrace

    - name: CTest Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ctest-${{ github.job }}-log
        path: |
          ${{ github.workspace }}/build/*.log

    - name: Data Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: data-${{ github.job }}-files
        path: |
          ${{ github.workspace }}/build/omnitrace-tests-config/*.cfg
          ${{ github.workspace }}/build/omnitrace-tests-output/**/*.txt
          ${{ github.workspace }}/build/omnitrace-tests-output/**/*-instr*.json

    - name: Kill Perfetto
      if: success() || failure()
      continue-on-error: True
      run: |
        set +e
        RUNNING_PROCS=$(pgrep trace_processor_shell)
        if [ -n "${RUNNING_PROCS}" ]; then kill -s 9 ${RUNNING_PROCS}; fi
