name: ubuntu-focal-external-rocm

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: MinSizeRel
  OMNITRACE_VERBOSE: 1
  OMNITRACE_CI: ON
  OMNITRACE_OUTPUT_PATH: omnitrace-tests-output
  OMNITRACE_OUTPUT_PREFIX: "%argt%/"

jobs:
  ubuntu-focal-external-rocm:
    runs-on: ubuntu-20.04
    container:
      image: jrmadsen/omnitrace-ci:ubuntu-20.04
    strategy:
      matrix:
        compiler: ['g++']
        rocm_version: ['4.3', '4.5', 'debian']

    steps:
    - uses: actions/checkout@v2

    - name: Install Packages
      timeout-minutes: 5
      run:
        apt-get update &&
        apt-get install -y software-properties-common wget gnupg2 &&
        wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - &&
        echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{ matrix.rocm_version }}/ ubuntu main" | tee /etc/apt/sources.list.d/rocm.list &&
        apt-get update &&
        apt-get install -y build-essential m4 autoconf libtool python3-pip clang libomp-dev ${{ matrix.compiler }} libudev-dev libnuma-dev rocm-dev rocm-utils roctracer-dev rocprofiler-dev hip-base hsa-amd-aqlprofile hsa-rocr-dev hsakmt-roct-dev libpapi-dev libopenmpi-dev curl &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install 'cmake==3.16.3' &&
        for i in 6 7 8 9; do /opt/conda/envs/py3.${i}/bin/python -m pip install numpy; done

    - name: Configure Env
      run:
        echo "CC=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g')" >> $GITHUB_ENV &&
        echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV &&
        echo "CMAKE_PREFIX_PATH=/opt/dyninst:/opt/elfutils:${CMAKE_PREFIX_PATH}" >> $GITHUB_ENV &&
        echo "/opt/omnitrace/bin:/opt/dyninst/bin:/opt/elfutils/bin:${HOME}/.local/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=/opt/omnitrace/lib:/opt/dyninst/lib:/opt/elfutils/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

    - name: Configure CMake
      timeout-minutes: 10
      run:
        git config --global --add safe.directory ${PWD} &&
        cmake --version &&
        cmake -B build
          -DCMAKE_C_COMPILER=${CC}
          -DCMAKE_CXX_COMPILER=${CXX}
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=/opt/omnitrace
          -DOMNITRACE_BUILD_TESTING=OFF
          -DOMNITRACE_BUILD_DEVELOPER=ON
          -DOMNITRACE_BUILD_EXTRA_OPTIMIZATIONS=OFF
          -DOMNITRACE_BUILD_LTO=OFF
          -DOMNITRACE_USE_MPI=OFF
          -DOMNITRACE_USE_MPI_HEADERS=ON
          -DOMNITRACE_USE_HIP=ON
          -DOMNITRACE_MAX_THREADS=64
          -DOMNITRACE_USE_SANITIZER=OFF
          -DOMNITRACE_USE_PAPI=OFF
          -DOMNITRACE_INSTALL_PERFETTO_TOOLS=ON

    - name: Build
      timeout-minutes: 45
      run:
        cmake --build build --target all --parallel 2 -- VERBOSE=1

    - name: Install
      run:
        cmake --build build --target install --parallel 2

    - name: Test
      timeout-minutes: 45
      run:
        cd build &&
        ldd ./omnitrace &&
        ./omnitrace --help &&
        ctest -V -N -O omnitrace-ctest-${{ github.job }}-commands.log &&
        ctest -V --output-log omnitrace-ctest-${{ github.job }}.log --stop-on-failure

    - name: Test Install
      timeout-minutes: 10
      run: |
        set -v
        traced --background
        export OMNITRACE_DEBUG=ON
        export OMNITRACE_PERFETTO_BACKEND=system
        which omnitrace-avail
        ldd $(which omnitrace-avail)
        omnitrace-avail --help
        omnitrace-avail -a
        which omnitrace-critical-trace
        ldd $(which omnitrace-critical-trace)
        which omnitrace
        ldd $(which omnitrace)
        omnitrace --help
        omnitrace -e -v 1 -o ls.inst --simulate -- ls
        omnitrace -e -v 1 --simulate -- ls
        omnitrace -e -v 1 -o ls.inst -- ls
        perfetto --out ls-perfetto-trace.proto --txt -c omnitrace.cfg
        ./ls.inst
        omnitrace -e -v 1 -- ls
        du -m ls-perfetto-trace.proto

    - name: Test User API
      timeout-minutes: 10
      run: |
        set -v
        ./scripts/test-find-package.sh --install-dir /opt/omnitrace

    - name: CTest Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: ctest-${{ github.job }}-log
        path: |
          build/*.log

    - name: Data Artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: data-${{ github.job }}-files
        path: |
          omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-output/**/*.txt
          build/omnitrace-tests-output/**/*-instr*.json
