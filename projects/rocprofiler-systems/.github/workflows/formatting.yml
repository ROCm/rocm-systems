
name: Formatting
run-name: formatting

on:
  push:
    branches: [ amd-mainline, amd-staging, release/** ]
  pull_request:
    branches: [ amd-mainline, amd-staging, release/** ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  call-workflow-passing-data:
    name: Documentation
    uses: ROCm/rocm-docs-core/.github/workflows/linting.yml@develop

  python:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: black format
      run: |
        black --diff --check .

  cmake:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        python3 -m pip install gersemi
    - name: gersemi
      run: |
        set +e
        gersemi -i $(find . -type f ! -path '*/external/*' | grep -E 'CMakeLists.txt|\.cmake$')
        if [ $(git diff | wc -l) -gt 0 ]; then
          echo -e "\nError! CMake code not formatted. Run gersemi ...\n"
          echo -e "\nFiles:\n"
          git diff --name-only
          echo -e "\nFull diff:\n"
          git diff
          exit 1
        fi

  source:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        DISTRIB_CODENAME=$(cat /etc/lsb-release | grep DISTRIB_CODENAME | awk -F '=' '{print $NF}')
        sudo apt-get update
        sudo apt-get install -y software-properties-common wget curl clang-format-18
    - name: clang-format
      run: |
        set +e
        FILES=$(find source examples tests -type f | egrep '\.(h|hpp|c|cpp)(|\.in)$')
        FORMAT_OUT=$(clang-format-18 -output-replacements-xml ${FILES})
        RET=$(echo ${FORMAT_OUT} | grep -c '<replacement ')
        if [ "${RET}" -ne 0 ]; then
          echo -e "\nError! Code not formatted. Detected ${RET} lines\n"
          clang-format-18 -i ${FILES}
          git diff
          exit ${RET}
        fi

  includes:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    - name: check-includes
      run: |
        set +e
        FILES=$(find source examples -type f | egrep '\.(hpp|cpp)(|\.in)$')
        MATCHES=$(egrep 'include "timemory/|include <bits/' ${FILES})
        if [ -n "${MATCHES}" ]; then
          echo -e "\nError! Included timemory header with quotes or bits folder included\n"
          echo -e "### MATCHES: ###"
          echo -e "${MATCHES}"
          echo -e "################"
          exit 1
        fi
