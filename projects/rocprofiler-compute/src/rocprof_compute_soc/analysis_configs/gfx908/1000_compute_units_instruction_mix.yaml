# AUTOGENERATED FILE. Only edit for testing purposes, not for development. Generated from utils/unified_config.yaml. Generated by utils/split_config.py
Panel Config:
  id: 1000
  title: Compute Units - Instruction Mix
  metrics_description:
    VALU: The total number of vector arithmetic logic unit (VALU) operations issued.
      These are the workhorses of the compute unit, and are used to execute a wide
      range of instruction types including floating point operations, non-uniform
      address calculations, transcendental operations, integer operations, shifts,
      conditional evaluation, etc.
    VMEM: The total number of vector memory operations issued. These include most
      loads, stores and atomic operations and all accesses to generic, global, private
      and texture memory.
    LDS: The total number of LDS (also known as shared memory) operations issued.
      These include loads, stores, atomics, and HIP's __shfl operations.
    MFMA: The total number of matrix fused multiply-add instructions issued.
    SALU: The total number of scalar arithmetic logic unit (SALU) operations issued.
      Typically these are used for address calculations, literal constants, and other
      operations that are provably uniform across a wavefront. Although scalar memory
      (SMEM) operations are issued by the SALU, they are counted separately in this
      section.
    SMEM: The total number of scalar memory (SMEM) operations issued. These are typically
      used for loading kernel arguments, base-pointers and loads from HIP's __constant__
      memory.
    Branch: The total number of branch operations issued. These typically consist
      of jump or branch operations and are used to implement control flow.
    INT32: The total number of instructions operating on 32-bit integer operands issued
      to the VALU per normalization unit.
    INT64: The total number of instructions operating on 64-bit integer operands issued
      to the VALU per normalization unit.
    F16-ADD: The total number of addition instructions operating on 16-bit floating-point
      operands issued to the VALU per normalization unit.
    F16-MUL: The total number of multiplication instructions operating on 16-bit floating-point
      operands issued to the VALU per normalization unit.
    F16-FMA: The total number of fused multiply-add instructions operating on 16-bit
      floating-point operands issued to the VALU per normalization unit.
    F16-Trans: The total number of transcendental instructions (e.g., sqrt) operating
      on 16-bit floating-point operands issued to the VALU per normalization unit.
    F32-ADD: The total number of addition instructions operating on 32-bit floating-point
      operands issued to the VALU per normalization unit.
    F32-MUL: The total number of multiplication instructions operating on 32-bit floating-point
      operands issued to the VALU per normalization unit.
    F32-FMA: The total number of fused multiply-add instructions operating on 32-bit
      floating-point operands issued to the VALU per normalization unit.
    F32-Trans: The total number of transcendental instructions (such as sqrt) operating
      on 32-bit floating-point operands issued to the VALU per normalization unit.
    F64-ADD: The total number of addition instructions operating on 64-bit floating-point
      operands issued to the VALU per normalization unit.
    F64-MUL: The total number of multiplication instructions operating on 64-bit floating-point
      operands issued to the VALU per normalization unit.
    F64-FMA: The total number of fused multiply-add instructions operating on 64-bit
      floating-point operands issued to the VALU per normalization unit.
    F64-Trans: The total number of transcendental instructions (such as sqrt) operating
      on 64-bit floating-point operands issued to the VALU per normalization unit.
    Conversion: "The total number of type conversion instructions (such as converting\
      \ data to or from F32\u2194F64) issued to the VALU per normalization unit."
    Global/Generic Instr: The total number of global & generic memory instructions
      executed on all compute units on the accelerator, per normalization unit.
    Global/Generic Read: The total number of global & generic memory read instructions
      executed on all compute units on the accelerator, per normalization unit.
    Global/Generic Write: The total number of global & generic memory write instructions
      executed on all compute units on the accelerator, per normalization unit.
    Global/Generic Atomic: The total number of global & generic memory atomic (with
      and without return) instructions executed on all compute units on the accelerator,
      per normalization unit.
    Spill/Stack Instr: The total number of spill/stack memory instructions executed
      on all compute units on the accelerator, per normalization unit.
    Spill/Stack Read: The total number of spill/stack memory read instructions executed
      on all compute units on the accelerator, per normalization unit.
    Spill/Stack Write: The total number of spill/stack memory write instructions executed
      on all compute units on the accelerator, per normalization unit.
    Spill/Stack Atomic: The total number of spill/stack memory atomic (with and without
      return) instructions executed on all compute units on the accelerator, per normalization
      unit. Typically unused as these memory operations are typically used to implement
      thread-local storage.
    MFMA-I8: The total number of 8-bit integer MFMA instructions issued per normalization
      unit.
    MFMA-F8: The total number of 8-bit floating point MFMA instructions issued per
      normalization unit. This is supported in AMD Instinct MI300 series and later
      only.
    MFMA-F16: The total number of 16-bit floating point MFMA instructions issued per
      normalization unit.
    MFMA-BF16: The total number of 16-bit brain floating point MFMA instructions issued
      per normalization unit.
    MFMA-F32: The total number of 32-bit floating-point MFMA instructions issued per
      normalization unit.
    MFMA-F64: The total number of 64-bit floating-point MFMA instructions issued per
      normalization unit.
  data source:
  - metric_table:
      id: 1001
      title: Overall Instruction Mix
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        LDS:
          avg: AVG((SQ_INSTS_LDS / $denom))
          min: MIN((SQ_INSTS_LDS / $denom))
          max: MAX((SQ_INSTS_LDS / $denom))
          unit: (instr + $normUnit)
        SALU:
          avg: AVG((SQ_INSTS_SALU / $denom))
          min: MIN((SQ_INSTS_SALU / $denom))
          max: MAX((SQ_INSTS_SALU / $denom))
          unit: (instr + $normUnit)
        SMEM:
          avg: AVG((SQ_INSTS_SMEM / $denom))
          min: MIN((SQ_INSTS_SMEM / $denom))
          max: MAX((SQ_INSTS_SMEM / $denom))
          unit: (instr + $normUnit)
        Branch:
          avg: AVG((SQ_INSTS_BRANCH / $denom))
          min: MIN((SQ_INSTS_BRANCH / $denom))
          max: MAX((SQ_INSTS_BRANCH / $denom))
          unit: (instr + $normUnit)
  - metric_table:
      id: 1002
      title: VALU Arithmetic Instruction Mix
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric: {}
  - metric_table:
      id: 1003
      title: VMEM Instruction Mix
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Global/Generic Instr:
          avg: AVG((TA_FLAT_WAVEFRONTS_sum / $denom))
          min: MIN((TA_FLAT_WAVEFRONTS_sum / $denom))
          max: MAX((TA_FLAT_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Global/Generic Read:
          avg: AVG((TA_FLAT_READ_WAVEFRONTS_sum / $denom))
          min: MIN((TA_FLAT_READ_WAVEFRONTS_sum / $denom))
          max: MAX((TA_FLAT_READ_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Global/Generic Write:
          avg: AVG((TA_FLAT_WRITE_WAVEFRONTS_sum / $denom))
          min: MIN((TA_FLAT_WRITE_WAVEFRONTS_sum / $denom))
          max: MAX((TA_FLAT_WRITE_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Global/Generic Atomic:
          avg: AVG((TA_FLAT_ATOMIC_WAVEFRONTS_sum / $denom))
          min: MIN((TA_FLAT_ATOMIC_WAVEFRONTS_sum / $denom))
          max: MAX((TA_FLAT_ATOMIC_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Spill/Stack Instr:
          avg: AVG((TA_BUFFER_WAVEFRONTS_sum / $denom))
          min: MIN((TA_BUFFER_WAVEFRONTS_sum / $denom))
          max: MAX((TA_BUFFER_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Spill/Stack Read:
          avg: AVG((TA_BUFFER_READ_WAVEFRONTS_sum / $denom))
          min: MIN((TA_BUFFER_READ_WAVEFRONTS_sum / $denom))
          max: MAX((TA_BUFFER_READ_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Spill/Stack Write:
          avg: AVG((TA_BUFFER_WRITE_WAVEFRONTS_sum / $denom))
          min: MIN((TA_BUFFER_WRITE_WAVEFRONTS_sum / $denom))
          max: MAX((TA_BUFFER_WRITE_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
        Spill/Stack Atomic:
          avg: AVG((TA_BUFFER_ATOMIC_WAVEFRONTS_sum / $denom))
          min: MIN((TA_BUFFER_ATOMIC_WAVEFRONTS_sum / $denom))
          max: MAX((TA_BUFFER_ATOMIC_WAVEFRONTS_sum / $denom))
          unit: (instr + $normUnit)
  - metric_table:
      id: 1004
      title: MFMA Arithmetic Instruction Mix
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric: {}
