# AUTOGENERATED FILE. Only edit for testing purposes, not for development. Generated from utils/unified_config.yaml. Generated by utils/split_config.py
Panel Config:
  id: 1600
  title: Vector L1 Data Cache
  metrics_description:
    Hit rate: The ratio of the number of vL1D cache line requests that hit in vL1D
      cache over the total number of cache line requests to the vL1D Cache RAM.
    Bandwidth: The number of bytes looked up in the vL1D cache as a result of VMEM
      instructions, as a percent of the peak theoretical bandwidth achievable on the
      specific accelerator. The number of bytes is calculated as the number of cache
      lines requested multiplied by the cache line size. This value does not consider
      partial requests, so for instance, if only a single value is requested in a
      cache line, the data movement will still be counted as a full cache line.
    Utilization: Indicates how busy the vL1D Cache RAM was during the kernel execution.
      The number of cycles where the vL1D Cache RAM is actively processing any request
      divided by the number of cycles where the vL1D is active.
    Coalescing: Indicates how well memory instructions were coalesced by the address
      processing unit, ranging from uncoalesced (25%) to fully coalesced (100%). Calculated
      as the average number of thread-requests generated per instruction divided by
      the ideal number of thread-requests per instruction.
    Stalled on L2 Data: The ratio of the number of cycles where the vL1D is stalled
      waiting for requested data to return from the L2 cache divided by the number
      of cycles where the vL1D is active.
    Stalled on L2 Req: The ratio of the number of cycles where the vL1D is stalled
      waiting to issue a request for data to the L2 cache divided by the number of
      cycles where the vL1D is active.
    Tag RAM Stall (Read): The ratio of the number of cycles where the vL1D is stalled
      due to Read requests with conflicting tags being looked up concurrently, divided
      by the number of cycles where the vL1D is active.
    Tag RAM Stall (Write): The ratio of the number of cycles where the vL1D is stalled
      due to Write requests with conflicting tags being looked up concurrently, divided
      by the number of cycles where the vL1D is active.
    Tag RAM Stall (Atomic): The ratio of the number of cycles where the vL1D is stalled
      due to Atomic requests with conflicting tags being looked up concurrently, divided
      by the number of cycles where the vL1D is active.
    Total Req: The total number of incoming requests from the address processing unit
      after coalescing.
    Read Req: The total number of incoming read requests from the address processing
      unit after coalescing per normalization unit.
    Write Req: The total number of incoming write requests from the address processing
      unit after coalescing per normalization unit.
    Atomic Req: The total number of incoming atomic requests from the address processing
      unit after coalescing per normalization unit.
    Cache BW: The number of bytes looked up in the vL1D cache as a result of VMEM
      instructions per normalization unit. The number of bytes is calculated as the
      number of cache lines requested multiplied by the cache line size.  This value
      does not consider partial requests, so for instance, if only a single value
      is requested in a cache line, the data movement will still be counted as a full
      cache line.
    Cache Hit Rate: The ratio of the number of vL1D cache line requests that hit in
      vL1D cache over the total number of cache line requests to the vL1D Cache RAM.
    Cache Accesses: The total number of cache line lookups in the vL1D.
    Cache Hits: The number of cache accesses minus the number of outgoing requests
      to the L2 cache, that is, the number of cache line requests serviced by the
      vL1D Cache RAM per normalization unit.
    Invalidations: The number of times the vL1D was issued a write-back invalidate
      command during the kernel's execution per normalization unit. This may be triggered
      by, for instance, the buffer_wbinvl1 instruction.
    L1-L2 BW: The number of bytes transferred across the vL1D-L2 interface as a result
      of VMEM instructions, per normalization unit. The number of bytes is calculated
      as the number of cache lines requested multiplied by the cache line size. This
      value does not consider partial requests, so for instance, if only a single
      value is requested in a cache line, the data movement will still be counted
      as a full cache line.
    L1-L2 Read: The number of read requests for a vL1D cache line that were not satisfied
      by the vL1D and must be retrieved from the to the L2 Cache per normalization
      unit.
    L1-L2 Write: The number of write requests to a vL1D cache line that were sent
      through the vL1D to the L2 cache, per normalization unit.
    L1-L2 Atomic: The number of atomic requests that are sent through the vL1D to
      the L2 cache, per normalization unit. This includes requests for atomics with,
      and without return.
    L1 Access Latency: Calculated as the average number of cycles that a vL1D cache
      line request spent in the vL1D cache pipeline.
    L1-L2 Read Latency: Calculated as the average number of cycles that the vL1D cache
      took to issue and receive read requests from the L2 Cache. This number also
      includes requests for atomics with return values.
    L1-L2 Write Latency: Calculated as the average number of cycles that the vL1D
      cache took to issue and receive acknowledgement of a write request to the L2
      Cache. This number also includes requests for atomics without return values.
    NC - Read: Total read requests with NC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    UC - Read: Total read requests with UC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    CC - Read: Total read requests with CC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    RW - Read: Total read requests with RW mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    RW - Write: Total write requests with RW mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    NC - Write: Total write requests with NC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    UC - Write: Total write requests with UC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    CC - Write: Total write requests with CC mtype from this TCP to all TCCs Sum over
      TCP instances per normalization unit.
    NC - Atomic: Total atomic requests with NC mtype from this TCP to all TCCs Sum
      over TCP instances per normalization unit.
    UC - Atomic: Total atomic requests with UC mtype from this TCP to all TCCs Sum
      over TCP instances per normalization unit.
    CC - Atomic: Total atomic requests with CC mtype from this TCP to all TCCs Sum
      over TCP instances per normalization unit.
    RW - Atomic: Total atomic requests with RW mtype from this TCP to all TCCs Sum
      over TCP instances per normalization unit.
    Req: The number of translation requests made to the UTCL1 per normalization unit.
    Hit Ratio: The ratio of the number of translation requests that hit in the UTCL1
      divided by the total number of translation requests made to the UTCL1.
    Hits: The number of translation requests that hit in the UTCL1, and could be reused,
      per normalization unit.
    Translation Misses: The total number of translation requests that missed in the
      UTCL1 due to  translation not being present in the cache, per normalization
      unit.
    Permission Misses: "The total number of translation requests that missed in the\
      \ UTCL1 due to a permission error, per normalization unit. This is unused and\
      \ expected to be zero in most configurations for modern CDNA\u2122 accelerators."
  data source:
  - metric_table:
      id: 1601
      title: vL1D Speed-of-Light
      header:
        metric: Metric
        value: Avg
        unit: Unit
      metric:
        Hit rate:
          value: AVG(((100 - ((100 * (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / TCP_TOTAL_CACHE_ACCESSES_sum)) if (TCP_TOTAL_CACHE_ACCESSES_sum != 0)
            else None))
          unit: Pct of Peak
        Bandwidth:
          value: ((100 * AVG(((TCP_TOTAL_CACHE_ACCESSES_sum * 128) / (End_Timestamp
            - Start_Timestamp)))) / ((($max_sclk / 1000) * 128) * $cu_per_gpu))
          unit: Pct of Peak
        Utilization:
          value: AVG((((TCP_GATE_EN2_sum * 100) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None))
          unit: Pct of Peak
        Coalescing:
          value: AVG(((((TA_TOTAL_WAVEFRONTS_sum * 64) * 100) / (TCP_TOTAL_ACCESSES_sum
            * 4)) if (TCP_TOTAL_ACCESSES_sum != 0) else None))
          unit: Pct of Peak
      comparable: false
      cli_style: simple_bar
      tui_style: simple_bar
  - metric_table:
      id: 1602
      title: vL1D cache stall metrics
      header:
        metric: Metric
        expr: Expression
      metric:
        Stalled on L2 Data:
          expr: (((100 * TCP_PENDING_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None)
        Stalled on L2 Req:
          expr: (((100 * TCP_TCR_TCP_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None)
        Stalled on Address:
          expr: (((100 * TCP_TCP_TA_ADDR_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if
            (TCP_GATE_EN1_sum != 0) else None)
        Stalled on Data:
          expr: (((100 * TCP_TCP_TA_DATA_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if
            (TCP_GATE_EN1_sum != 0) else None)
        Stalled on Latency FIFO:
          expr: (((100 * TCP_LFIFO_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None)
        Stalled on Request FIFO:
          expr: (((100 * TCP_RFIFO_STALL_CYCLES_sum) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None)
        Stalled on Read Return:
          expr: (((100 * TCP_TCR_RDRET_STALL_sum) / TCP_GATE_EN1_sum) if (TCP_GATE_EN1_sum
            != 0) else None)
        Tag RAM Stall (Read):
          expr: (((100 * TCP_READ_TAGCONFLICT_STALL_CYCLES_sum) / TCP_GATE_EN1_sum)
            if (TCP_GATE_EN1_sum != 0) else None)
        Tag RAM Stall (Write):
          expr: (((100 * TCP_WRITE_TAGCONFLICT_STALL_CYCLES_sum) / TCP_GATE_EN1_sum)
            if (TCP_GATE_EN1_sum != 0) else None)
        Tag RAM Stall (Atomic):
          expr: (((100 * TCP_ATOMIC_TAGCONFLICT_STALL_CYCLES_sum) / TCP_GATE_EN1_sum)
            if (TCP_GATE_EN1_sum != 0) else None)
      cli_style: simple_box
      tui_style: simple_box
  - metric_table:
      id: 1603
      title: vL1D cache access metrics
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Total Req:
          avg: AVG((TCP_TOTAL_ACCESSES_sum / $denom))
          min: MIN((TCP_TOTAL_ACCESSES_sum / $denom))
          max: MAX((TCP_TOTAL_ACCESSES_sum / $denom))
          unit: (Req  + $normUnit)
        Read Req:
          avg: AVG((TCP_TOTAL_READ_sum / $denom))
          min: MIN((TCP_TOTAL_READ_sum / $denom))
          max: MAX((TCP_TOTAL_READ_sum / $denom))
          unit: (Req  + $normUnit)
        Write Req:
          avg: AVG((TCP_TOTAL_WRITE_sum / $denom))
          min: MIN((TCP_TOTAL_WRITE_sum / $denom))
          max: MAX((TCP_TOTAL_WRITE_sum / $denom))
          unit: (Req  + $normUnit)
        Atomic Req:
          avg: AVG(((TCP_TOTAL_ATOMIC_WITH_RET_sum + TCP_TOTAL_ATOMIC_WITHOUT_RET_sum)
            / $denom))
          min: MIN(((TCP_TOTAL_ATOMIC_WITH_RET_sum + TCP_TOTAL_ATOMIC_WITHOUT_RET_sum)
            / $denom))
          max: MAX(((TCP_TOTAL_ATOMIC_WITH_RET_sum + TCP_TOTAL_ATOMIC_WITHOUT_RET_sum)
            / $denom))
          unit: (Req  + $normUnit)
        Cache BW:
          avg: AVG(((TCP_TOTAL_CACHE_ACCESSES_sum * 128) / $denom))
          min: MIN(((TCP_TOTAL_CACHE_ACCESSES_sum * 128) / $denom))
          max: MAX(((TCP_TOTAL_CACHE_ACCESSES_sum * 128) / $denom))
          unit: (Bytes + $normUnit)
        Cache Hit Rate:
          avg: AVG(((100 - ((100 * (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / TCP_TOTAL_CACHE_ACCESSES_sum)) if (TCP_TOTAL_CACHE_ACCESSES_sum != 0)
            else None))
          min: MIN(((100 - ((100 * (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / TCP_TOTAL_CACHE_ACCESSES_sum)) if (TCP_TOTAL_CACHE_ACCESSES_sum != 0)
            else None))
          max: MAX(((100 - ((100 * (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / TCP_TOTAL_CACHE_ACCESSES_sum)) if (TCP_TOTAL_CACHE_ACCESSES_sum != 0)
            else None))
          unit: pct
        Cache Accesses:
          avg: AVG((TCP_TOTAL_CACHE_ACCESSES_sum / $denom))
          min: MIN((TCP_TOTAL_CACHE_ACCESSES_sum / $denom))
          max: MAX((TCP_TOTAL_CACHE_ACCESSES_sum / $denom))
          unit: (Req  + $normUnit)
        Cache Hits:
          avg: AVG(((TCP_TOTAL_CACHE_ACCESSES_sum - (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / $denom))
          min: MIN(((TCP_TOTAL_CACHE_ACCESSES_sum - (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / $denom))
          max: MAX(((TCP_TOTAL_CACHE_ACCESSES_sum - (((TCP_TCC_READ_REQ_sum + TCP_TCC_WRITE_REQ_sum)
            + TCP_TCC_ATOMIC_WITH_RET_REQ_sum) + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum))
            / $denom))
          unit: (Req  + $normUnit)
        Invalidations:
          avg: AVG((TCP_TOTAL_WRITEBACK_INVALIDATES_sum / $denom))
          min: MIN((TCP_TOTAL_WRITEBACK_INVALIDATES_sum / $denom))
          max: MAX((TCP_TOTAL_WRITEBACK_INVALIDATES_sum / $denom))
          unit: (Req + $normUnit)
        L1-L2 BW:
          avg: AVG(((128 * TCP_TCC_READ_REQ_sum + 64 * (TCP_TCC_WRITE_REQ_sum + TCP_TCC_ATOMIC_WITH_RET_REQ_sum
            + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)) / $denom))
          min: MIN(((128 * TCP_TCC_READ_REQ_sum + 64 * (TCP_TCC_WRITE_REQ_sum + TCP_TCC_ATOMIC_WITH_RET_REQ_sum
            + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)) / $denom))
          max: MAX(((128 * TCP_TCC_READ_REQ_sum + 64 * (TCP_TCC_WRITE_REQ_sum + TCP_TCC_ATOMIC_WITH_RET_REQ_sum
            + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)) / $denom))
          unit: (Bytes + $normUnit)
        Tag RAM 0 Req:
          avg: AVG((TCP_TAGRAM0_REQ_sum / $denom))
          min: MIN((TCP_TAGRAM0_REQ_sum / $denom))
          max: MAX((TCP_TAGRAM0_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        Tag RAM 1 Req:
          avg: AVG((TCP_TAGRAM1_REQ_sum / $denom))
          min: MIN((TCP_TAGRAM1_REQ_sum / $denom))
          max: MAX((TCP_TAGRAM1_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        Tag RAM 2 Req:
          avg: AVG((TCP_TAGRAM2_REQ_sum / $denom))
          min: MIN((TCP_TAGRAM2_REQ_sum / $denom))
          max: MAX((TCP_TAGRAM2_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        Tag RAM 3 Req:
          avg: AVG((TCP_TAGRAM3_REQ_sum / $denom))
          min: MIN((TCP_TAGRAM3_REQ_sum / $denom))
          max: MAX((TCP_TAGRAM3_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        L1-L2 Read:
          avg: AVG((TCP_TCC_READ_REQ_sum / $denom))
          min: MIN((TCP_TCC_READ_REQ_sum / $denom))
          max: MAX((TCP_TCC_READ_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        L1-L2 Write:
          avg: AVG((TCP_TCC_WRITE_REQ_sum / $denom))
          min: MIN((TCP_TCC_WRITE_REQ_sum / $denom))
          max: MAX((TCP_TCC_WRITE_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        L1-L2 Atomic:
          avg: AVG(((TCP_TCC_ATOMIC_WITH_RET_REQ_sum + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)
            / $denom))
          min: MIN(((TCP_TCC_ATOMIC_WITH_RET_REQ_sum + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)
            / $denom))
          max: MAX(((TCP_TCC_ATOMIC_WITH_RET_REQ_sum + TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum)
            / $denom))
          unit: (Req  + $normUnit)
        L1 Access Latency:
          avg: AVG((TCP_TCP_LATENCY_sum / $denom))
          min: MIN((TCP_TCP_LATENCY_sum / $denom))
          max: MAX((TCP_TCP_LATENCY_sum / $denom))
          unit: (Cycles  + $normUnit)
        L1-L2 Read Latency:
          avg: AVG((TCP_TCC_READ_REQ_LATENCY_sum / $denom))
          min: MIN((TCP_TCC_READ_REQ_LATENCY_sum / $denom))
          max: MAX((TCP_TCC_READ_REQ_LATENCY_sum / $denom))
          unit: (Cycles  + $normUnit)
        L1-L2 Write Latency:
          avg: AVG((TCP_TCC_WRITE_REQ_LATENCY_sum / $denom))
          min: MIN((TCP_TCC_WRITE_REQ_LATENCY_sum / $denom))
          max: MAX((TCP_TCC_WRITE_REQ_LATENCY_sum / $denom))
          unit: (Cycles  + $normUnit)
  - metric_table:
      id: 1604
      title: L1D - L2 Transactions
      header:
        metric: Metric
        xfer: Xfer
        coherency: Coherency
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        NC - Read:
          xfer: Read
          coherency: NC
          avg: AVG((TCP_TCC_NC_READ_REQ_sum / $denom))
          min: MIN((TCP_TCC_NC_READ_REQ_sum / $denom))
          max: MAX((TCP_TCC_NC_READ_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        UC - Read:
          xfer: Read
          coherency: UC
          avg: AVG((TCP_TCC_UC_READ_REQ_sum / $denom))
          min: MIN((TCP_TCC_UC_READ_REQ_sum / $denom))
          max: MAX((TCP_TCC_UC_READ_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        CC - Read:
          xfer: Read
          coherency: CC
          avg: AVG((TCP_TCC_CC_READ_REQ_sum / $denom))
          min: MIN((TCP_TCC_CC_READ_REQ_sum / $denom))
          max: MAX((TCP_TCC_CC_READ_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        RW - Read:
          xfer: Read
          coherency: RW
          avg: AVG((TCP_TCC_RW_READ_REQ_sum / $denom))
          min: MIN((TCP_TCC_RW_READ_REQ_sum / $denom))
          max: MAX((TCP_TCC_RW_READ_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        RW - Write:
          xfer: Write
          coherency: RW
          avg: AVG((TCP_TCC_RW_WRITE_REQ_sum / $denom))
          min: MIN((TCP_TCC_RW_WRITE_REQ_sum / $denom))
          max: MAX((TCP_TCC_RW_WRITE_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        NC - Write:
          xfer: Write
          coherency: NC
          avg: AVG((TCP_TCC_NC_WRITE_REQ_sum / $denom))
          min: MIN((TCP_TCC_NC_WRITE_REQ_sum / $denom))
          max: MAX((TCP_TCC_NC_WRITE_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        UC - Write:
          xfer: Write
          coherency: UC
          avg: AVG((TCP_TCC_UC_WRITE_REQ_sum / $denom))
          min: MIN((TCP_TCC_UC_WRITE_REQ_sum / $denom))
          max: MAX((TCP_TCC_UC_WRITE_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        CC - Write:
          xfer: Write
          coherency: CC
          avg: AVG((TCP_TCC_CC_WRITE_REQ_sum / $denom))
          min: MIN((TCP_TCC_CC_WRITE_REQ_sum / $denom))
          max: MAX((TCP_TCC_CC_WRITE_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        NC - Atomic:
          xfer: Atomic
          coherency: NC
          avg: AVG((TCP_TCC_NC_ATOMIC_REQ_sum / $denom))
          min: MIN((TCP_TCC_NC_ATOMIC_REQ_sum / $denom))
          max: MAX((TCP_TCC_NC_ATOMIC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        UC - Atomic:
          xfer: Atomic
          coherency: UC
          avg: AVG((TCP_TCC_UC_ATOMIC_REQ_sum / $denom))
          min: MIN((TCP_TCC_UC_ATOMIC_REQ_sum / $denom))
          max: MAX((TCP_TCC_UC_ATOMIC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        CC - Atomic:
          xfer: Atomic
          coherency: CC
          avg: AVG((TCP_TCC_CC_ATOMIC_REQ_sum / $denom))
          min: MIN((TCP_TCC_CC_ATOMIC_REQ_sum / $denom))
          max: MAX((TCP_TCC_CC_ATOMIC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        RW - Atomic:
          xfer: Atomic
          coherency: RW
          avg: AVG((TCP_TCC_RW_ATOMIC_REQ_sum / $denom))
          min: MIN((TCP_TCC_RW_ATOMIC_REQ_sum / $denom))
          max: MAX((TCP_TCC_RW_ATOMIC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
  - metric_table:
      id: 1605
      title: L1 Unified Translation Cache (UTCL1)
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        units: Units
      metric:
        Req:
          avg: AVG((TCP_UTCL1_REQUEST_sum / $denom))
          min: MIN((TCP_UTCL1_REQUEST_sum / $denom))
          max: MAX((TCP_UTCL1_REQUEST_sum / $denom))
          units: (Req + $normUnit)
        Inflight Req:
          avg: AVG((TCP_CLIENT_UTCL1_INFLIGHT_sum / $denom))
          min: MIN((TCP_CLIENT_UTCL1_INFLIGHT_sum / $denom))
          max: MAX((TCP_CLIENT_UTCL1_INFLIGHT_sum / $denom))
          units: (Req + $normUnit)
        Hit Ratio:
          avg: AVG((((100 * TCP_UTCL1_TRANSLATION_HIT_sum) / TCP_UTCL1_REQUEST_sum)
            if (TCP_UTCL1_REQUEST_sum != 0) else None))
          min: MIN((((100 * TCP_UTCL1_TRANSLATION_HIT_sum) / TCP_UTCL1_REQUEST_sum)
            if (TCP_UTCL1_REQUEST_sum != 0) else None))
          max: MAX((((100 * TCP_UTCL1_TRANSLATION_HIT_sum) / TCP_UTCL1_REQUEST_sum)
            if (TCP_UTCL1_REQUEST_sum != 0) else None))
          units: pct
        Hits:
          avg: AVG((TCP_UTCL1_TRANSLATION_HIT_sum / $denom))
          min: MIN((TCP_UTCL1_TRANSLATION_HIT_sum / $denom))
          max: MAX((TCP_UTCL1_TRANSLATION_HIT_sum / $denom))
          units: (Req + $normUnit)
        Translation Misses:
          avg: AVG((TCP_UTCL1_TRANSLATION_MISS_sum / $denom))
          min: MIN((TCP_UTCL1_TRANSLATION_MISS_sum / $denom))
          max: MAX((TCP_UTCL1_TRANSLATION_MISS_sum / $denom))
          units: (Req + $normUnit)
        Misses under Translation Miss:
          avg: AVG((TCP_UTCL1_TRANSLATION_MISS_UNDER_MISS_sum / $denom))
          min: MIN((TCP_UTCL1_TRANSLATION_MISS_UNDER_MISS_sum / $denom))
          max: MAX((TCP_UTCL1_TRANSLATION_MISS_UNDER_MISS_sum / $denom))
          units: (Req + $normUnit)
        Permission Misses:
          avg: AVG((TCP_UTCL1_PERMISSION_MISS_sum / $denom))
          min: MIN((TCP_UTCL1_PERMISSION_MISS_sum / $denom))
          max: MAX((TCP_UTCL1_PERMISSION_MISS_sum / $denom))
          units: (Req + $normUnit)
  - metric_table:
      id: 1606
      title: L1D Addr Translation Stalls
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        units: Units
      metric:
        Cache Full Stall:
          avg: AVG((TCP_UTCL1_STALL_INFLIGHT_MAX_sum / $denom))
          min: MIN((TCP_UTCL1_STALL_INFLIGHT_MAX_sum / $denom))
          max: MAX((TCP_UTCL1_STALL_INFLIGHT_MAX_sum / $denom))
          units: (Cycles + $normUnit)
        Cache Miss Stall:
          avg: AVG((TCP_UTCL1_STALL_MULTI_MISS_sum / $denom))
          min: MIN((TCP_UTCL1_STALL_MULTI_MISS_sum / $denom))
          max: MAX((TCP_UTCL1_STALL_MULTI_MISS_sum / $denom))
          units: (Cycles + $normUnit)
        Serialization Stall:
          avg: AVG((TCP_UTCL1_SERIALIZATION_STALL_sum / $denom))
          min: MIN((TCP_UTCL1_SERIALIZATION_STALL_sum / $denom))
          max: MAX((TCP_UTCL1_SERIALIZATION_STALL_sum / $denom))
          units: (Cycles + $normUnit)
        Thrashing Stall:
          avg: AVG((TCP_UTCL1_THRASHING_STALL_sum / $denom))
          min: MIN((TCP_UTCL1_THRASHING_STALL_sum / $denom))
          max: MAX((TCP_UTCL1_THRASHING_STALL_sum / $denom))
          units: (Cycles + $normUnit)
        Latency FIFO Stall:
          avg: AVG((TCP_UTCL1_LFIFO_FULL_sum / $denom))
          min: MIN((TCP_UTCL1_LFIFO_FULL_sum / $denom))
          max: MAX((TCP_UTCL1_LFIFO_FULL_sum / $denom))
          units: (Cycles + $normUnit)
        Resident Page Full Stall:
          avg: AVG((TCP_UTCL1_STALL_LFIFO_NO_RES_sum / $denom))
          min: MIN((TCP_UTCL1_STALL_LFIFO_NO_RES_sum / $denom))
          max: MAX((TCP_UTCL1_STALL_LFIFO_NO_RES_sum / $denom))
          units: (Cycles + $normUnit)
        UTCL2 Stall:
          avg: AVG((TCP_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS_sum / $denom))
          min: MIN((TCP_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS_sum / $denom))
          max: MAX((TCP_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS_sum / $denom))
          units: (Cycles + $normUnit)
