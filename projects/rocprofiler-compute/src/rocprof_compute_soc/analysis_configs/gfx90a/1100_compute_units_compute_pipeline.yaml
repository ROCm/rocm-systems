# AUTOGENERATED FILE. Only edit for testing purposes, not for development. Generated from utils/unified_config.yaml. Generated by utils/split_config.py
Panel Config:
  id: 1100
  title: Compute Units - Compute Pipeline
  metrics_description:
    VALU FLOPs: 'The total floating-point operations executed per second on the VALU.
      This is also presented as a percent of the peak theoretical FLOPs achievable
      on the specific accelerator. Note: this does not include any floating-point
      operations from MFMA instructions.'
    VALU IOPs: 'The total integer operations executed per second on the VALU. This
      is also presented as a percent of the peak theoretical IOPs achievable on the
      specific accelerator. Note: this does not include any integer operations from
      MFMA instructions.'
    MFMA FLOPs (BF16): 'The total number of 16-bit brain floating point MFMA operations
      executed per second. Note: this does not include any 16-bit brain floating point
      operations from VALU instructions. This is also presented as a percent of the
      peak theoretical BF16 MFMA operations achievable on the specific accelerator.'
    MFMA FLOPs (F16): 'The total number of 16-bit floating point MFMA operations executed
      per second. Note: this does not include any 16-bit floating point operations
      from VALU instructions. This is also presented as a percent of the peak theoretical
      F16 MFMA operations achievable on the specific accelerator.'
    MFMA FLOPs (F32): 'The total number of 32-bit floating point MFMA operations executed
      per second. Note: this does not include any 32-bit floating point operations
      from VALU instructions. This is also presented as a percent of the peak theoretical
      F32 MFMA operations achievable on the specific accelerator.'
    MFMA FLOPs (F64): 'The total number of 64-bit floating point MFMA operations executed
      per second. Note: this does not include any 64-bit floating point operations
      from VALU instructions. This is also presented as a percent of the peak theoretical
      F64 MFMA operations achievable on the specific accelerator.'
    MFMA IOPs (INT8): 'The total number of 8-bit integer MFMA operations executed
      per second. Note: this does not include any 8-bit integer operations from VALU
      instructions. This is also presented as a percent of the peak theoretical INT8
      MFMA operations achievable on the specific accelerator.'
    IPC: The ratio of the total number of instructions executed on the CU over the
      total active CU cycles.
    IPC (Issued): The ratio of the total number of (non-internal) instructions issued
      over the number of cycles where the scheduler was actively working on issuing
      instructions.
    SALU Utilization: Indicates what percent of the kernel's duration the SALU was
      busy executing instructions. Computed as the ratio of the total number of cycles
      spent by the scheduler issuing SALU / SMEM instructions over the total CU cycles.
    VALU Utilization: Indicates what percent of the kernel's duration the VALU was
      busy executing instructions. Does not include VMEM operations. Computed as the
      ratio of the total number of cycles spent by the scheduler issuing VALU instructions
      over the total CU cycles.
    VMEM Utilization: Indicates what percent of the kernel's duration the VMEM unit
      was busy executing instructions, including both global/generic and spill/scratch
      operations (see the VMEM instruction count metrics for more detail). Does not
      include VALU operations. Computed as the ratio of the total number of cycles
      spent by the scheduler issuing VMEM instructions over the total CU cycles.
    Branch Utilization: Indicates what percent of the kernel's duration the branch
      unit was busy executing instructions. Computed as the ratio of the total number
      of cycles spent by the scheduler issuing branch instructions over the total
      CU cycles.
    VALU Active Threads: Indicates the average level of divergence within a wavefront
      over the lifetime of the kernel. The number of work-items that were active in
      a wavefront during execution of each VALU instruction, time-averaged over all
      VALU instructions run on all wavefronts in the kernel
    MFMA Utilization: Indicates what percent of the kernel's duration the MFMA unit
      was busy executing instructions. Computed as the ratio of the total number of
      cycles spent by the MFMA was busy over the total CU cycles.
    MFMA Instruction Cycles: The average duration of MFMA instructions in this kernel
      in cycles. Computed as the ratio of the total number of cycles the MFMA unit
      was busy over the total number of MFMA instructions.
    VMEM Latency: The average number of round-trip cycles (that is, from issue to
      data return / acknowledgment) required for a VMEM instruction to complete.
    SMEM Latency: The average number of round-trip cycles (that is, from issue to
      data return / acknowledgment) required for a SMEM instruction to complete.
    FLOPs (Total): The total number of floating-point operations executed on either
      the VALU or MFMA units, per normalization unit.
    IOPs (Total): The total number of integer operations executed on either the VALU
      or MFMA units, per normalization unit.
    F16 OPs: The total number of 16-bit floating-point operations executed on either
      the VALU or MFMA units, per normalization unit.
    BF16 OPs: The total number of 16-bit brain floating-point operations executed
      on either the VALU or MFMA units, per normalization unit.
    F32 OPs: The total number of 32-bit floating-point operations executed on either
      the VALU or MFMA units, per normalization unit.
    F64 OPs: The total number of 64-bit floating-point operations executed on either
      the VALU or MFMA units, per normalization unit.
    INT8 OPs: The total number of 8-bit integer operations executed on either the
      VALU or MFMA units, per normalization unit.
  data source:
  - metric_table:
      id: 1101
      title: Compute Speed-of-Light
      header:
        metric: Metric
        value: Avg
        unit: Unit
        peak: Peak
        pop: Pct of Peak
      metric:
        VALU FLOPs:
          value: AVG(((((64 * (((SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16) +
            SQ_INSTS_VALU_TRANS_F16) + (2 * SQ_INSTS_VALU_FMA_F16))) + (64 * (((SQ_INSTS_VALU_ADD_F32
            + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32) + (2 * SQ_INSTS_VALU_FMA_F32))))
            + (64 * (((SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64)
            + (2 * SQ_INSTS_VALU_FMA_F64)))) / (End_Timestamp - Start_Timestamp)))
          unit: GFLOP
          peak: (((($max_sclk * $cu_per_gpu) * 64) * 2) / 1000)
          pop: ((100 * AVG(((((64 * (((SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16)
            + SQ_INSTS_VALU_TRANS_F16) + (2 * SQ_INSTS_VALU_FMA_F16))) + (64 * (((SQ_INSTS_VALU_ADD_F32
            + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32) + (2 * SQ_INSTS_VALU_FMA_F32))))
            + (64 * (((SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64)
            + (2 * SQ_INSTS_VALU_FMA_F64)))) / (End_Timestamp - Start_Timestamp))))
            / (((($max_sclk * $cu_per_gpu) * 64) * 2) / 1000))
        VALU IOPs:
          value: AVG(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) / (End_Timestamp
            - Start_Timestamp)))
          unit: GIOP
          peak: (((($max_sclk * $cu_per_gpu) * 64) * 2) / 1000)
          pop: ((100 * AVG(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) / (End_Timestamp
            - Start_Timestamp)))) / (((($max_sclk * $cu_per_gpu) * 64) * 2) / 1000))
        MFMA FLOPs (BF16):
          value: AVG(((SQ_INSTS_VALU_MFMA_MOPS_BF16 * 512) / (End_Timestamp - Start_Timestamp)))
          unit: GFLOP
          peak: ((($max_sclk * $cu_per_gpu) * 1024) / 1000)
          pop: ((100 * AVG(((SQ_INSTS_VALU_MFMA_MOPS_BF16 * 512) / (End_Timestamp
            - Start_Timestamp)))) / ((($max_sclk * $cu_per_gpu) * 1024) / 1000))
        MFMA FLOPs (F16):
          value: AVG(((SQ_INSTS_VALU_MFMA_MOPS_F16 * 512) / (End_Timestamp - Start_Timestamp)))
          unit: GFLOP
          peak: ((($max_sclk * $cu_per_gpu) * 1024) / 1000)
          pop: ((100 * AVG(((SQ_INSTS_VALU_MFMA_MOPS_F16 * 512) / (End_Timestamp -
            Start_Timestamp)))) / ((($max_sclk * $cu_per_gpu) * 1024) / 1000))
        MFMA FLOPs (F32):
          value: AVG(((SQ_INSTS_VALU_MFMA_MOPS_F32 * 512) / (End_Timestamp - Start_Timestamp)))
          unit: GFLOP
          peak: ((($max_sclk * $cu_per_gpu) * 256) / 1000)
          pop: ((100 * AVG(((SQ_INSTS_VALU_MFMA_MOPS_F32 * 512) / (End_Timestamp -
            Start_Timestamp)))) / ((($max_sclk * $cu_per_gpu) * 256) / 1000))
        MFMA FLOPs (F64):
          value: AVG(((SQ_INSTS_VALU_MFMA_MOPS_F64 * 512) / (End_Timestamp - Start_Timestamp)))
          unit: GFLOP
          peak: ((($max_sclk * $cu_per_gpu) * 256) / 1000)
          pop: ((100 * AVG(((SQ_INSTS_VALU_MFMA_MOPS_F64 * 512) / (End_Timestamp -
            Start_Timestamp)))) / ((($max_sclk * $cu_per_gpu) * 256) / 1000))
        MFMA IOPs (INT8):
          value: AVG(((SQ_INSTS_VALU_MFMA_MOPS_I8 * 512) / (End_Timestamp - Start_Timestamp)))
          unit: GIOP
          peak: ((($max_sclk * $cu_per_gpu) * 1024) / 1000)
          pop: ((100 * AVG(((SQ_INSTS_VALU_MFMA_MOPS_I8 * 512) / (End_Timestamp -
            Start_Timestamp)))) / ((($max_sclk * $cu_per_gpu) * 1024) / 1000))
  - metric_table:
      id: 1102
      title: Pipeline Statistics
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        IPC:
          avg: AVG((SQ_INSTS / SQ_BUSY_CU_CYCLES))
          min: MIN((SQ_INSTS / SQ_BUSY_CU_CYCLES))
          max: MAX((SQ_INSTS / SQ_BUSY_CU_CYCLES))
          unit: Instr/cycle
        IPC (Issued):
          avg: AVG(((((((((SQ_INSTS_VALU + SQ_INSTS_VMEM) + SQ_INSTS_SALU) + SQ_INSTS_SMEM))
            + SQ_INSTS_BRANCH) + SQ_INSTS_SENDMSG) + SQ_INSTS_VSKIPPED  + SQ_INSTS_LDS)
            / SQ_ACTIVE_INST_ANY))
          min: MIN(((((((((SQ_INSTS_VALU + SQ_INSTS_VMEM) + SQ_INSTS_SALU) + SQ_INSTS_SMEM))
            + SQ_INSTS_BRANCH) + SQ_INSTS_SENDMSG) + SQ_INSTS_VSKIPPED + SQ_INSTS_LDS)
            / SQ_ACTIVE_INST_ANY))
          max: MAX(((((((((SQ_INSTS_VALU + SQ_INSTS_VMEM) + SQ_INSTS_SALU) + SQ_INSTS_SMEM))
            + SQ_INSTS_BRANCH) + SQ_INSTS_SENDMSG) + SQ_INSTS_VSKIPPED  + SQ_INSTS_LDS)
            / SQ_ACTIVE_INST_ANY))
          unit: Instr/cycle
        SALU Utilization:
          avg: AVG((((100 * SQ_ACTIVE_INST_SCA) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          min: MIN((((100 * SQ_ACTIVE_INST_SCA) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          max: MAX((((100 * SQ_ACTIVE_INST_SCA) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          unit: pct
        VALU Utilization:
          avg: AVG((((100 * SQ_ACTIVE_INST_VALU) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          min: MIN((((100 * SQ_ACTIVE_INST_VALU) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          max: MAX((((100 * SQ_ACTIVE_INST_VALU) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          unit: pct
        VMEM Utilization:
          avg: AVG((((100 * (SQ_ACTIVE_INST_FLAT+SQ_ACTIVE_INST_VMEM)) / $GRBM_GUI_ACTIVE_PER_XCD)
            / $cu_per_gpu))
          min: MIN((((100 * (SQ_ACTIVE_INST_FLAT+SQ_ACTIVE_INST_VMEM)) / $GRBM_GUI_ACTIVE_PER_XCD)
            / $cu_per_gpu))
          max: MAX((((100 * (SQ_ACTIVE_INST_FLAT+SQ_ACTIVE_INST_VMEM)) / $GRBM_GUI_ACTIVE_PER_XCD)
            / $cu_per_gpu))
          unit: pct
        Branch Utilization:
          avg: AVG((((100 * SQ_ACTIVE_INST_MISC) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          min: MIN((((100 * SQ_ACTIVE_INST_MISC) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          max: MAX((((100 * SQ_ACTIVE_INST_MISC) / $GRBM_GUI_ACTIVE_PER_XCD) / $cu_per_gpu))
          unit: pct
        VALU Active Threads:
          avg: AVG(((SQ_THREAD_CYCLES_VALU / SQ_ACTIVE_INST_VALU) if (SQ_ACTIVE_INST_VALU
            != 0) else None))
          min: MIN(((SQ_THREAD_CYCLES_VALU / SQ_ACTIVE_INST_VALU) if (SQ_ACTIVE_INST_VALU
            != 0) else None))
          max: MAX(((SQ_THREAD_CYCLES_VALU / SQ_ACTIVE_INST_VALU) if (SQ_ACTIVE_INST_VALU
            != 0) else None))
          unit: Threads
        MFMA Utilization:
          avg: AVG(((100 * SQ_VALU_MFMA_BUSY_CYCLES) / ((4 * $cu_per_gpu) * $GRBM_GUI_ACTIVE_PER_XCD)))
          min: MIN(((100 * SQ_VALU_MFMA_BUSY_CYCLES) / ((4 * $cu_per_gpu) * $GRBM_GUI_ACTIVE_PER_XCD)))
          max: MAX(((100 * SQ_VALU_MFMA_BUSY_CYCLES) / ((4 * $cu_per_gpu) * $GRBM_GUI_ACTIVE_PER_XCD)))
          unit: pct
        MFMA Instruction Cycles:
          avg: AVG(((SQ_VALU_MFMA_BUSY_CYCLES / SQ_INSTS_MFMA) if (SQ_INSTS_MFMA !=
            0) else None))
          min: MIN(((SQ_VALU_MFMA_BUSY_CYCLES / SQ_INSTS_MFMA) if (SQ_INSTS_MFMA !=
            0) else None))
          max: MAX(((SQ_VALU_MFMA_BUSY_CYCLES / SQ_INSTS_MFMA) if (SQ_INSTS_MFMA !=
            0) else None))
          unit: cycles/instr
        VMEM Latency:
          avg: AVG(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_VMEM) if (SQ_INSTS_VMEM != 0)
            else None))
          min: MIN(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_VMEM) if (SQ_INSTS_VMEM != 0)
            else None))
          max: MAX(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_VMEM) if (SQ_INSTS_VMEM != 0)
            else None))
          unit: Cycles
          coll_level: SQ_INST_LEVEL_VMEM
        SMEM Latency:
          avg: AVG(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_SMEM) if (SQ_INSTS_SMEM != 0)
            else None))
          min: MIN(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_SMEM) if (SQ_INSTS_SMEM != 0)
            else None))
          max: MAX(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_SMEM) if (SQ_INSTS_SMEM != 0)
            else None))
          unit: Cycles
          coll_level: SQ_INST_LEVEL_SMEM
  - metric_table:
      id: 1103
      title: Arithmetic Operations
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        FLOPs (Total):
          avg: AVG((((((((64 * (((SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16) +
            SQ_INSTS_VALU_TRANS_F16) + (SQ_INSTS_VALU_FMA_F16 * 2))) + ((512 * SQ_INSTS_VALU_MFMA_MOPS_F16)
            + (512 * SQ_INSTS_VALU_MFMA_MOPS_BF16))) + (64 * (((SQ_INSTS_VALU_ADD_F32
            + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32) + (SQ_INSTS_VALU_FMA_F32
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32)) + (64 * (((SQ_INSTS_VALU_ADD_F64
            + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64) + (SQ_INSTS_VALU_FMA_F64
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64)) / $denom))
          min: MIN((((((((64 * (((SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16) +
            SQ_INSTS_VALU_TRANS_F16) + (SQ_INSTS_VALU_FMA_F16 * 2))) + ((512 * SQ_INSTS_VALU_MFMA_MOPS_F16)
            + (512 * SQ_INSTS_VALU_MFMA_MOPS_BF16))) + (64 * (((SQ_INSTS_VALU_ADD_F32
            + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32) + (SQ_INSTS_VALU_FMA_F32
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32)) + (64 * (((SQ_INSTS_VALU_ADD_F64
            + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64) + (SQ_INSTS_VALU_FMA_F64
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64)) / $denom))
          max: MAX((((((((64 * (((SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16) +
            SQ_INSTS_VALU_TRANS_F16) + (SQ_INSTS_VALU_FMA_F16 * 2))) + ((512 * SQ_INSTS_VALU_MFMA_MOPS_F16)
            + (512 * SQ_INSTS_VALU_MFMA_MOPS_BF16))) + (64 * (((SQ_INSTS_VALU_ADD_F32
            + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32) + (SQ_INSTS_VALU_FMA_F32
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32)) + (64 * (((SQ_INSTS_VALU_ADD_F64
            + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64) + (SQ_INSTS_VALU_FMA_F64
            * 2)))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64)) / $denom))
          unit: (OPs  + $normUnit)
        IOPs (Total):
          avg: AVG(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) + (SQ_INSTS_VALU_MFMA_MOPS_I8
            * 512)) / $denom)
          min: MIN(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) + (SQ_INSTS_VALU_MFMA_MOPS_I8
            * 512)) / $denom)
          max: MAX(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) + (SQ_INSTS_VALU_MFMA_MOPS_I8
            * 512)) / $denom)
          unit: (OPs  + $normUnit)
        F16 OPs:
          avg: AVG(((((((64 * SQ_INSTS_VALU_ADD_F16) + (64 * SQ_INSTS_VALU_MUL_F16))
            + (64 * SQ_INSTS_VALU_TRANS_F16)) + (128 * SQ_INSTS_VALU_FMA_F16)) + (512
            * SQ_INSTS_VALU_MFMA_MOPS_F16)) / $denom))
          min: MIN(((((((64 * SQ_INSTS_VALU_ADD_F16) + (64 * SQ_INSTS_VALU_MUL_F16))
            + (64 * SQ_INSTS_VALU_TRANS_F16)) + (128 * SQ_INSTS_VALU_FMA_F16)) + (512
            * SQ_INSTS_VALU_MFMA_MOPS_F16)) / $denom))
          max: MAX(((((((64 * SQ_INSTS_VALU_ADD_F16) + (64 * SQ_INSTS_VALU_MUL_F16))
            + (64 * SQ_INSTS_VALU_TRANS_F16)) + (128 * SQ_INSTS_VALU_FMA_F16)) + (512
            * SQ_INSTS_VALU_MFMA_MOPS_F16)) / $denom))
          unit: (OPs  + $normUnit)
        BF16 OPs:
          avg: AVG(((512 * SQ_INSTS_VALU_MFMA_MOPS_BF16) / $denom))
          min: MIN(((512 * SQ_INSTS_VALU_MFMA_MOPS_BF16) / $denom))
          max: MAX(((512 * SQ_INSTS_VALU_MFMA_MOPS_BF16) / $denom))
          unit: (OPs  + $normUnit)
        F32 OPs:
          avg: AVG((((64 * (((SQ_INSTS_VALU_ADD_F32 + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32)
            + (SQ_INSTS_VALU_FMA_F32 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32))
            / $denom))
          min: MIN((((64 * (((SQ_INSTS_VALU_ADD_F32 + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32)
            + (SQ_INSTS_VALU_FMA_F32 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32))
            / $denom))
          max: MAX((((64 * (((SQ_INSTS_VALU_ADD_F32 + SQ_INSTS_VALU_MUL_F32) + SQ_INSTS_VALU_TRANS_F32)
            + (SQ_INSTS_VALU_FMA_F32 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F32))
            / $denom))
          unit: (OPs  + $normUnit)
        F64 OPs:
          avg: AVG((((64 * (((SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64)
            + (SQ_INSTS_VALU_FMA_F64 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64))
            / $denom))
          min: MIN((((64 * (((SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64)
            + (SQ_INSTS_VALU_FMA_F64 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64))
            / $denom))
          max: MAX((((64 * (((SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64) + SQ_INSTS_VALU_TRANS_F64)
            + (SQ_INSTS_VALU_FMA_F64 * 2))) + (512 * SQ_INSTS_VALU_MFMA_MOPS_F64))
            / $denom))
          unit: (OPs  + $normUnit)
        INT8 OPs:
          avg: AVG(((SQ_INSTS_VALU_MFMA_MOPS_I8 * 512) / $denom))
          min: MIN(((SQ_INSTS_VALU_MFMA_MOPS_I8 * 512) / $denom))
          max: MAX(((SQ_INSTS_VALU_MFMA_MOPS_I8 * 512) / $denom))
          unit: (OPs  + $normUnit)
