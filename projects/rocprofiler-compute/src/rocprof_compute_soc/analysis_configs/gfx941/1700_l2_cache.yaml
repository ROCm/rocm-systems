# AUTOGENERATED FILE. Only edit for testing purposes, not for development. Generated from utils/unified_config.yaml. Generated by utils/split_config.py
Panel Config:
  id: 1700
  title: L2 Cache
  metrics_description:
    Utilization: The ratio of the number of cycles an L2 channel was active, summed
      over all L2 channels on the accelerator over the total L2 cycles.
    Peak Bandwidth: The number of bytes looked up in the L2 cache, as a percent of
      the peak theoretical bandwidth achievable on the specific accelerator. The number
      of bytes is calculated as the number of cache lines requested multiplied by
      the cache line size. This value does not consider partial requests, so e.g.,
      if only a single value is requested in a cache line, the data movement will
      still be counted as a full cache line.
    Hit Rate: The ratio of the number of L2 cache line requests that hit in the L2
      cache over the total number of incoming cache line requests to the L2 cache.
    L2-Fabric Read BW: The number of bytes read by the L2 over the Infinity Fabric
      interface per unit time.
    L2-Fabric Write and Atomic BW: The number of bytes sent by the L2 over the Infinity
      Fabric interface by write and atomic operations per unit time.
    HBM Bandwidth: Maximum theoretical bandwidth of the accelerator's local high-bandwidth
      memory (HBM) per unit time. This value is calculated as the number of HBM channels
      multiplied by the HBM channel width multiplied by the HBM clock frequency.
    Read BW: The total number of bytes read by the L2 cache from Infinity Fabric per
      normalization unit.
    HBM Read Traffic: The percent of read requests generated by the L2 cache that
      are routed to the accelerator's local high-bandwidth memory (HBM). This breakdown
      does not consider the size of the request (meaning that 32B and 64B requests
      are both counted as a single request), so this metric only approximates the
      percent of the L2-Fabric Read bandwidth directed to the local HBM.
    Remote Read Traffic: The percent of read requests generated by the L2 cache that
      are routed to any memory location other than the accelerator's local high-bandwidth
      memory (HBM) - for example, the CPU's DRAM or a remote accelerator's HBM. This
      breakdown does not consider the size of the request (meaning that 32B and 64B
      requests are both counted as a single request), so this metric only approximates
      the percent of the L2-Fabric Read bandwidth directed to a remote location.
    Uncached Read Traffic: The percent of read requests generated by the L2 cache
      that are reading from an uncached memory allocation. Note, as described in the
      request flow section, a single 64B read request is typically counted as two
      uncached read requests. So, it is possible for the Uncached Read Traffic to
      reach up to 200% of the total number of read requests. This breakdown does not
      consider the size of the request (i.e., 32B and 64B requests are both counted
      as a single request), so this metric only approximates the percent of the L2-Fabric
      read bandwidth directed to an uncached memory location.
    Write and Atomic BW: The total number of bytes written by the L2 over Infinity
      Fabric by write and atomic operations per normalization unit. Note that on current
      CDNA accelerators, such as the MI2XX, requests are only considered atomic by
      Infinity Fabric if they are targeted at non-write-cacheable memory, for example,
      fine-grained memory allocations or uncached memory allocations on the MI2XX.
    HBM Write and Atomic Traffic: The percent of write and atomic requests generated
      by the L2 cache that are routed to the accelerator's local high-bandwidth memory
      (HBM). This breakdown does not consider the size of the request (meaning that
      32B and 64B requests are both counted as a single request), so this metric only
      approximates the percent of the L2-Fabric Write and Atomic bandwidth directed
      to the local HBM. Note that on current CDNA accelerators, such as the MI2XX,
      requests are only considered atomic by Infinity Fabric if they are targeted
      at fine-grained memory allocations or uncached memory allocations.
    Remote Write and Atomic Traffic: The percent of read requests generated by the
      L2 cache that are routed to any memory location other than the accelerator's
      local high-bandwidth memory (HBM) - for example, the CPU's DRAM or a remote
      accelerator's HBM. This breakdown does not consider the size of the request
      (meaning that 32B and 64B requests are both counted as a single request), so
      this metric only approximates the percent of the L2-Fabric Read bandwidth directed
      to a remote location. Note that on current CDNA accelerators, such as the MI2XX,
      requests are only considered atomic by Infinity Fabric if they are targeted
      at fine-grained memory allocations or uncached memory allocations.
    Atomic Traffic: The percent of write requests generated by the L2 cache that are
      atomic requests to any memory location. This breakdown does not consider the
      size of the request (meaning that 32B and 64B requests are both counted as a
      single request), so this metric only approximates the percent of the L2-Fabric
      Read bandwidth directed to a remote location. Note that on current CDNA accelerators,
      such as the MI2XX, requests are only considered atomic by Infinity Fabric if
      they are targeted at fine-grained memory allocations or uncached memory allocations.
    Uncached Write and Atomic Traffic: The percent of write and atomic requests generated
      by the L2 cache that are targeting uncached memory allocations. This breakdown
      does not consider the size of the request (meaning that 32B and 64B requests
      are both counted as a single request), so this metric only approximates the
      percent of the L2-Fabric read bandwidth directed to uncached memory allocations.
    Read Latency: The time-averaged number of cycles read requests spent in Infinity
      Fabric before data was returned to the L2.
    Write and Atomic Latency: The time-averaged number of cycles write requests spent
      in Infinity Fabric before a completion acknowledgement was returned to the L2.
    Atomic Latency: The time-averaged number of cycles atomic requests spent in Infinity
      Fabric before a completion acknowledgement (atomic without return value) or
      data (atomic with return value) was returned to the L2.
    Bandwidth: The number of bytes looked up in the L2 cache, per normalization unit.
      The number of bytes is calculated as the number of cache lines requested multiplied
      by the cache line size. This value does not consider partial requests, so for
      example, if only a single value is requested in a cache line, the data movement
      will still be counted as a full cache line.
    Read Bandwidth: Total number of bytes looked up in the L2 cache for read requests,
      per normalization unit.
    Write Bandwidth: Total number of bytes looked up in the L2 cache for write requests,
      per normalization unit.
    Atomic Bandwidth: Total number of bytes looked up in the L2 cache for atomic requests,
      per normalization unit.
    Req: The total number of incoming requests to the L2 from all clients for all
      request types, per normalization unit.
    Read Req: The total number of read requests to the L2 from all clients.
    Write Req: The total number of write requests to the L2 from all clients.
    Atomic Req: The total number of atomic requests (with and without return) to the
      L2 from all clients.
    Streaming Req: The total number of incoming requests to the L2 that are marked
      as streaming. The exact meaning of this may differ depending on the targeted
      accelerator, however on an MI2XX this corresponds to non-temporal load or stores.
      The L2 cache attempts to evict streaming requests before normal requests when
      the L2 is at capacity.
    Probe Req: The number of coherence probe requests made to the L2 cache from outside
      the accelerator. On an MI2XX, probe requests may be generated by, for example,
      writes to fine-grained device memory or by writes to coarse-grained device memory.
    Cache Hit: The ratio of the number of L2 cache line requests that hit in the L2
      cache over the total number of incoming cache line requests to the L2 cache.
    Hits: The total number of requests to the L2 from all clients that hit in the
      cache. As noted in the Speed-of-Light section, this includes hit-on-miss requests.
    Misses: The total number of requests to the L2 from all clients that miss in the
      cache. As noted in the Speed-of-Light section, these do not include hit-on-miss
      requests.
    Writeback: The total number of L2 cache lines written back to memory for any reason.
      Write-backs may occur due to user code (such as HIP kernel calls to _threadfence_system
      or atomic built-ins) by the command processor's memory acquire/release fences,
      or for other internal hardware reasons.
    Writeback (Internal): The total number of L2 cache lines written back to memory
      for internal hardware reasons, per normalization unit.
    Writeback (vL1D Req): The total number of L2 cache lines written back to memory
      due to requests initiated by the vL1D cache, per normalization unit.
    Evict (Internal): The total number of L2 cache lines evicted from the cache due
      to capacity limits, per normalization unit.
    Evict (vL1D Req): The total number of L2 cache lines evicted from the cache due
      to invalidation requests initiated by the vL1D cache, per normalization unit.
    NC Req: The total number of requests to the L2 to Not-hardware-Coherent (NC) memory
      allocations, per normalization unit.
    UC Req: The total number of requests to the L2 that go to Uncached (UC) memory
      allocations.
    CC Req: The total number of requests to the L2 that go to Coherently Cacheable
      (CC) memory allocations.
    RW Req: The total number of requests to the L2 that go to Read-Write coherent
      memory (RW) allocations.
    Write - Credit Starvation: The number of cycles the L2-Fabric interface was stalled
      on write or atomic requests to any memory location because too many write/atomic
      requests were currently in flight, as a percent of the total active L2 cycles.
    Read (32B): The total number of L2 requests to Infinity Fabric to read 32B of
      data from any memory location, per normalization unit.
    Read (64B): The total number of L2 requests to Infinity Fabric to read 64B of
      data from any memory location, per normalization unit.
    Read (Uncached): The total number of L2 requests to Infinity Fabric to read uncached
      data from any memory location, per normalization unit. 64B requests for uncached
      data are counted as two 32B uncached data requests.
    HBM Read: The total number of L2 requests to Infinity Fabric to read 32B or 64B
      of data from the accelerator's local HBM, per normalization unit.
    Remote Read: The total number of L2 requests to Infinity Fabric to read 32B or
      64B of data from any source other than the accelerator's local HBM, per normalization
      unit.
    Read Bandwidth - PCIe: Total number of bytes due to L2 read requests due to PCIe
      traffic, per normalization unit.
    "Read Bandwidth - Infinity Fabric\u2122": Total number of bytes due to L2 read
      requests due to Infinity Fabric traffic, per normalization unit.
    Read Bandwidth - HBM: Total number of bytes due to L2 read requests due to HBM
      traffic, per normalization unit.
    Write and Atomic (32B): The total number of L2 requests to Infinity Fabric to
      write or atomically update 32B of data to any memory location, per normalization
      unit.
    Write and Atomic (Uncached): The total number of L2 requests to Infinity Fabric
      to write or atomically update 32B or 64B of uncached data, per normalization
      unit.
    Write and Atomic (64B): The total number of L2 requests to Infinity Fabric to
      write or atomically update 64B of data in any memory location, per normalization
      unit.
    HBM Write and Atomic: The total number of L2 requests to Infinity Fabric to write
      or atomically update 32B or 64B of data in the accelerator's local HBM, per
      normalization unit.
    Remote Write and Atomic: The total number of L2 requests to Infinity Fabric to
      write or atomically update 32B or 64B of data in any memory location other than
      the accelerator's local HBM, per normalization unit.
    Write Bandwidth - PCIe: Total number of bytes due to L2 write requests due to
      PCIe traffic, per normalization unit.
    "Write Bandwidth - Infinity Fabric\u2122": Total number of bytes due to L2 write
      requests due to Infinity Fabric traffic, per normalization unit.
    Write Bandwidth - HBM: Total number of bytes due to L2 write requests due to HBM
      traffic, per normalization unit.
    Atomic Bandwidth - PCIe: Total number of bytes due to L2 atomic requests due to
      PCIe traffic, per normalization unit.
    "Atomic Bandwidth - Infinity Fabric\u2122": Total number of bytes due to L2 atomic
      requests due to Infinity Fabric traffic, per normalization unit.
    Atomic Bandwidth - HBM: Total number of bytes due to L2 atomic requests due to
      HBM traffic, per normalization unit.
    Atomic: The total number of L2 requests to Infinity Fabric to atomically update
      32B or 64B of data in any memory location, per normalization unit. See Request
      flow for more detail. Note that on current CDNA accelerators, such as the MI2XX,
      requests are only considered atomic by Infinity Fabric if they are targeted
      at non-write-cacheable memory, such as fine-grained memory allocations or uncached
      memory allocations on the MI2XX.
    Read Stall: "The ratio of the total number of cycles the L2-Fabric interface was\
      \ stalled on a read request to any destination (local HBM, remote PCIe\xAE connected\
      \ accelerator or CPU, or remote Infinity Fabric connected accelerator or CPU)\
      \ over the total active L2 cycles."
    Write Stall: The ratio of the total number of cycles the L2-Fabric interface was
      stalled on a write or atomic request to any destination (local HBM, remote accelerator
      or CPU, PCIe connected accelerator or CPU, or remote Infinity Fabric connected
      accelerator or CPU) over the total active L2 cycles.
    Read - PCIe Stall: The number of cycles the L2-Fabric interface was stalled on
      read requests to remote PCIe connected accelerators or CPUs as a percent of
      the total active L2 cycles.
    Read - Infinity Fabric Stall: The number of cycles the L2-Fabric interface was
      stalled on read requests to remote Infinity Fabric connected accelerators or
      CPUs as a percent of the total active L2 cycles.
    Read - HBM Stall: The number of cycles the L2-Fabric interface was stalled on
      read requests to the accelerator's local HBM as a percent of the total active
      L2 cycles.
    Write - PCIe Stall: The number of cycles the L2-Fabric interface was stalled on
      write or atomic requests to remote PCIe connected accelerators or CPUs as a
      percent of the total active L2 cycles.
    Write - Infinity Fabric Stall: The number of cycles the L2-Fabric interface was
      stalled on write or atomic requests to remote Infinity Fabric connected accelerators
      or CPUs as a percent of the total active L2 cycles.
    Write - HBM Stall: The number of cycles the L2-Fabric interface was stalled on
      write or atomic requests to accelerator's local HBM as a percent of the total
      active L2 cycles.
  data source:
  - metric_table:
      id: 1701
      title: L2 Speed-of-Light
      header:
        metric: Metric
        value: Avg
        unit: Unit
      metric:
        Utilization:
          value: AVG(((TCC_BUSY_sum * 100) / (TO_INT($total_l2_chan) * $GRBM_GUI_ACTIVE_PER_XCD)))
          unit: pct
        Peak Bandwidth:
          value: ((100 * AVG(((TCC_REQ_sum * 128) / (End_Timestamp - Start_Timestamp))))
            / ((($max_sclk / 1000) * 128) * TO_INT($total_l2_chan)))
          unit: pct
        Hit Rate:
          value: AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
            + TCC_MISS_sum) != 0) else 0))
          unit: pct
        L2-Fabric Read BW:
          value: AVG((((TCC_EA0_RDREQ_32B_sum * 32) + ((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum)
            * 64)) / (End_Timestamp - Start_Timestamp)))
          unit: GB/s
        L2-Fabric Write and Atomic BW:
          value: AVG((((TCC_EA0_WRREQ_64B_sum * 64) + ((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum)
            * 32)) / (End_Timestamp - Start_Timestamp)))
          unit: GB/s
        HBM Bandwidth:
          value: $hbmBandwidth
          unit: GB/s
  - metric_table:
      id: 1702
      title: L2-Fabric interface metrics
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Read BW:
          avg: AVG((((TCC_EA0_RDREQ_32B_sum * 32) + ((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum)
            * 64)) / $denom))
          min: MIN((((TCC_EA0_RDREQ_32B_sum * 32) + ((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum)
            * 64)) / $denom))
          max: MAX((((TCC_EA0_RDREQ_32B_sum * 32) + ((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum)
            * 64)) / $denom))
          unit: (Bytes  + $normUnit)
        HBM Read Traffic:
          avg: AVG((100 * (TCC_EA0_RDREQ_DRAM_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          min: MIN((100 * (TCC_EA0_RDREQ_DRAM_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          max: MAX((100 * (TCC_EA0_RDREQ_DRAM_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          unit: pct
        Remote Read Traffic:
          avg: AVG((100 * (MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum),0) / TCC_EA0_RDREQ_sum)
            if (TCC_EA0_RDREQ_sum != 0) else None))
          min: MIN((100 * (MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum),0) / TCC_EA0_RDREQ_sum)
            if (TCC_EA0_RDREQ_sum != 0) else None))
          max: MAX((100 * (MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum),0) / TCC_EA0_RDREQ_sum)
            if (TCC_EA0_RDREQ_sum != 0) else None))
          unit: pct
        Uncached Read Traffic:
          avg: AVG((100 * (TCC_EA0_RD_UNCACHED_32B_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          min: MIN((100 * (TCC_EA0_RD_UNCACHED_32B_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          max: MAX((100 * (TCC_EA0_RD_UNCACHED_32B_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          unit: pct
        Write and Atomic BW:
          avg: AVG((((TCC_EA0_WRREQ_64B_sum * 64) + ((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum)
            * 32)) / $denom))
          min: MIN((((TCC_EA0_WRREQ_64B_sum * 64) + ((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum)
            * 32)) / $denom))
          max: MAX((((TCC_EA0_WRREQ_64B_sum * 64) + ((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum)
            * 32)) / $denom))
          unit: (Bytes  + $normUnit)
        HBM Write and Atomic Traffic:
          avg: AVG((100 * (TCC_EA0_WRREQ_DRAM_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          min: MIN((100 * (TCC_EA0_WRREQ_DRAM_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          max: MAX((100 * (TCC_EA0_WRREQ_DRAM_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          unit: pct
        Remote Write and Atomic Traffic:
          avg: AVG((100 * (MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum),0) / TCC_EA0_WRREQ_sum)
            if (TCC_EA0_WRREQ_sum != 0) else None))
          min: MIN((100 * (MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum),0) / TCC_EA0_WRREQ_sum)
            if (TCC_EA0_WRREQ_sum != 0) else None))
          max: MAX((100 * (MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum),0) / TCC_EA0_WRREQ_sum)
            if (TCC_EA0_WRREQ_sum != 0) else None))
          unit: pct
        Atomic Traffic:
          avg: AVG((100 * (TCC_EA0_ATOMIC_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          min: MIN((100 * (TCC_EA0_ATOMIC_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          max: MAX((100 * (TCC_EA0_ATOMIC_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          unit: pct
        Uncached Write and Atomic Traffic:
          avg: AVG((100 * (TCC_EA0_WR_UNCACHED_32B_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          min: MIN((100 * (TCC_EA0_WR_UNCACHED_32B_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          max: MAX((100 * (TCC_EA0_WR_UNCACHED_32B_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          unit: pct
        Read Latency:
          avg: AVG(((TCC_EA0_RDREQ_LEVEL_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          min: MIN(((TCC_EA0_RDREQ_LEVEL_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          max: MAX(((TCC_EA0_RDREQ_LEVEL_sum / TCC_EA0_RDREQ_sum) if (TCC_EA0_RDREQ_sum
            != 0) else None))
          unit: Cycles
        Write and Atomic Latency:
          avg: AVG(((TCC_EA0_WRREQ_LEVEL_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          min: MIN(((TCC_EA0_WRREQ_LEVEL_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          max: MAX(((TCC_EA0_WRREQ_LEVEL_sum / TCC_EA0_WRREQ_sum) if (TCC_EA0_WRREQ_sum
            != 0) else None))
          unit: Cycles
        Atomic Latency:
          avg: AVG(((TCC_EA0_ATOMIC_LEVEL_sum / TCC_EA0_ATOMIC_sum) if (TCC_EA0_ATOMIC_sum
            != 0) else None))
          min: MIN(((TCC_EA0_ATOMIC_LEVEL_sum / TCC_EA0_ATOMIC_sum) if (TCC_EA0_ATOMIC_sum
            != 0) else None))
          max: MAX(((TCC_EA0_ATOMIC_LEVEL_sum / TCC_EA0_ATOMIC_sum) if (TCC_EA0_ATOMIC_sum
            != 0) else None))
          unit: Cycles
  - metric_table:
      id: 1703
      title: L2 Cache Accesses
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Bandwidth:
          avg: AVG((TCC_REQ_sum * 128) / $denom)
          min: MIN((TCC_REQ_sum * 128) / $denom)
          max: MAX((TCC_REQ_sum * 128) / $denom)
          unit: (Bytes + $normUnit)
        Req:
          avg: AVG((TCC_REQ_sum / $denom))
          min: MIN((TCC_REQ_sum / $denom))
          max: MAX((TCC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        Read Req:
          avg: AVG((TCC_READ_sum / $denom))
          min: MIN((TCC_READ_sum / $denom))
          max: MAX((TCC_READ_sum / $denom))
          unit: (Req  + $normUnit)
        Write Req:
          avg: AVG((TCC_WRITE_sum / $denom))
          min: MIN((TCC_WRITE_sum / $denom))
          max: MAX((TCC_WRITE_sum / $denom))
          unit: (Req  + $normUnit)
        Atomic Req:
          avg: AVG((TCC_ATOMIC_sum / $denom))
          min: MIN((TCC_ATOMIC_sum / $denom))
          max: MAX((TCC_ATOMIC_sum / $denom))
          unit: (Req  + $normUnit)
        Streaming Req:
          avg: AVG((TCC_STREAMING_REQ_sum / $denom))
          min: MIN((TCC_STREAMING_REQ_sum / $denom))
          max: MAX((TCC_STREAMING_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        Probe Req:
          avg: AVG((TCC_PROBE_sum / $denom))
          min: MIN((TCC_PROBE_sum / $denom))
          max: MAX((TCC_PROBE_sum / $denom))
          unit: (Req  + $normUnit)
        Cache Hit:
          avg: AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
            + TCC_MISS_sum) != 0) else None))
          min: MIN((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
            + TCC_MISS_sum) != 0) else None))
          max: MAX((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
            + TCC_MISS_sum) != 0) else None))
          unit: pct
        Hits:
          avg: AVG((TCC_HIT_sum / $denom))
          min: MIN((TCC_HIT_sum / $denom))
          max: MAX((TCC_HIT_sum / $denom))
          unit: (Hits  + $normUnit)
        Misses:
          avg: AVG((TCC_MISS_sum / $denom))
          min: MIN((TCC_MISS_sum / $denom))
          max: MAX((TCC_MISS_sum / $denom))
          unit: (Misses  + $normUnit)
        Writeback:
          avg: AVG((TCC_WRITEBACK_sum / $denom))
          min: MIN((TCC_WRITEBACK_sum / $denom))
          max: MAX((TCC_WRITEBACK_sum / $denom))
          unit: (Cachelines  + $normUnit)
        Writeback (Internal):
          avg: AVG((TCC_NORMAL_WRITEBACK_sum / $denom))
          min: MIN((TCC_NORMAL_WRITEBACK_sum / $denom))
          max: MAX((TCC_NORMAL_WRITEBACK_sum / $denom))
          unit: (Cachelines + $normUnit)
        Writeback (vL1D Req):
          avg: AVG((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
          min: MIN((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
          max: MAX((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
          unit: (Cachelines + $normUnit)
        Evict (Internal):
          avg: AVG((TCC_NORMAL_EVICT_sum / $denom))
          min: MIN((TCC_NORMAL_EVICT_sum / $denom))
          max: MAX((TCC_NORMAL_EVICT_sum / $denom))
          unit: (Cachelines + $normUnit)
        Evict (vL1D Req):
          avg: AVG((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
          min: MIN((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
          max: MAX((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
          unit: (Cachelines + $normUnit)
        NC Req:
          avg: AVG((TCC_NC_REQ_sum / $denom))
          min: MIN((TCC_NC_REQ_sum / $denom))
          max: MAX((TCC_NC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        UC Req:
          avg: AVG((TCC_UC_REQ_sum / $denom))
          min: MIN((TCC_UC_REQ_sum / $denom))
          max: MAX((TCC_UC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        CC Req:
          avg: AVG((TCC_CC_REQ_sum / $denom))
          min: MIN((TCC_CC_REQ_sum / $denom))
          max: MAX((TCC_CC_REQ_sum / $denom))
          unit: (Req  + $normUnit)
        RW Req:
          avg: AVG((TCC_RW_REQ_sum / $denom))
          min: MIN((TCC_RW_REQ_sum / $denom))
          max: MAX((TCC_RW_REQ_sum / $denom))
          unit: (Req  + $normUnit)
  - metric_table:
      id: 1704
      title: L2 Cache Stalls
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric: {}
  - metric_table:
      id: 1705
      title: L2 - Fabric Interface stalls
      header:
        metric: Metric
        type: Type
        transaction: Transaction
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      style:
        type: simple_multi_bar
      metric:
        Write - Credit Starvation:
          type: Credit Starvation
          transaction: Write
          avg: AVG(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum
            != 0) else None))
          min: MIN(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum
            != 0) else None))
          max: MAX(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum
            != 0) else None))
          unit: pct
  - metric_table:
      id: 1706
      title: L2 - Fabric interface detailed metrics
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Read (32B):
          avg: AVG((TCC_EA0_RDREQ_32B_sum / $denom))
          min: MIN((TCC_EA0_RDREQ_32B_sum / $denom))
          max: MAX((TCC_EA0_RDREQ_32B_sum / $denom))
          unit: (Req  + $normUnit)
        Read (64B):
          avg: AVG(((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum) / $denom))
          min: MIN(((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum) / $denom))
          max: MAX(((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_32B_sum) / $denom))
          unit: (Req  + $normUnit)
        Read (Uncached):
          avg: AVG((TCC_EA0_RD_UNCACHED_32B_sum / $denom))
          min: MIN((TCC_EA0_RD_UNCACHED_32B_sum / $denom))
          max: MAX((TCC_EA0_RD_UNCACHED_32B_sum / $denom))
          unit: (Req  + $normUnit)
        HBM Read:
          avg: AVG((TCC_EA0_RDREQ_DRAM_sum / $denom))
          min: MIN((TCC_EA0_RDREQ_DRAM_sum / $denom))
          max: MAX((TCC_EA0_RDREQ_DRAM_sum / $denom))
          unit: (Req  + $normUnit)
        Remote Read:
          avg: AVG((MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum), 0) / $denom))
          min: MIN((MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum), 0) / $denom))
          max: MAX((MAX((TCC_EA0_RDREQ_sum - TCC_EA0_RDREQ_DRAM_sum), 0) / $denom))
          unit: (Req  + $normUnit)
        Write and Atomic (32B):
          avg: AVG(((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum) / $denom))
          min: MIN(((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum) / $denom))
          max: MAX(((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_64B_sum) / $denom))
          unit: (Req  + $normUnit)
        Write and Atomic (Uncached):
          avg: AVG((TCC_EA0_WR_UNCACHED_32B_sum / $denom))
          min: MIN((TCC_EA0_WR_UNCACHED_32B_sum / $denom))
          max: MAX((TCC_EA0_WR_UNCACHED_32B_sum / $denom))
          unit: (Req  + $normUnit)
        Write and Atomic (64B):
          avg: AVG((TCC_EA0_WRREQ_64B_sum / $denom))
          min: MIN((TCC_EA0_WRREQ_64B_sum / $denom))
          max: MAX((TCC_EA0_WRREQ_64B_sum / $denom))
          unit: (Req  + $normUnit)
        HBM Write and Atomic:
          avg: AVG((TCC_EA0_WRREQ_DRAM_sum / $denom))
          min: MIN((TCC_EA0_WRREQ_DRAM_sum / $denom))
          max: MAX((TCC_EA0_WRREQ_DRAM_sum / $denom))
          unit: (Req  + $normUnit)
        Remote Write and Atomic:
          avg: AVG((MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum), 0) / $denom))
          min: MIN((MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum), 0) / $denom))
          max: MAX((MAX((TCC_EA0_WRREQ_sum - TCC_EA0_WRREQ_DRAM_sum), 0) / $denom))
          unit: (Req  + $normUnit)
        Atomic:
          avg: AVG((TCC_EA0_ATOMIC_sum / $denom))
          min: MIN((TCC_EA0_ATOMIC_sum / $denom))
          max: MAX((TCC_EA0_ATOMIC_sum / $denom))
          unit: (Req  + $normUnit)
