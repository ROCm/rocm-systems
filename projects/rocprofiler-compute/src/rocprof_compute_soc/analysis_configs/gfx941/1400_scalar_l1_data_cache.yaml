# AUTOGENERATED FILE. Only edit for testing purposes, not for development. Generated from utils/unified_config.yaml. Generated by utils/split_config.py
Panel Config:
  id: 1400
  title: Scalar L1 Data Cache
  metrics_description:
    Bandwidth Utilization: The number of bytes looked up in the sL1D cache, as a percent
      of the peak theoretical bandwidth. Calculated as the ratio of sL1D requests
      over the total sL1D cycles.
    Cache Hit Rate: Indicates the percent of sL1D requests that hit on a previously
      loaded line the cache. The ratio of the number of sL1D requests that hit over
      the number of all sL1D requests.
    sL1D-L2 BW Utilization: The percentage of the peak theoretical sL1D - L2 interface
      bandwidth acheived.\ \ Caclulated as total number of bytes read from, written
      to, or atomically updated\ \ across the sL1D - L2 interface.
    sL1D-L2 BW: "The total number of bytes read from, written to, or atomically updated\
      \ across the sL1D\u2194L2 interface, divided by total duration. Note that sL1D\
      \ writes and atomics are typically unused on current CDNA accelerators, so in\
      \ the majority of cases this can be interpreted as an sL1D\u2192L2 read bandwidth."
    Req: The total number of requests, of any size or type, made to the sL1D per normalization
      unit.
    Hits: The total number of sL1D requests that hit on a previously loaded cache
      line, per normalization unit.
    Misses - Non Duplicated: 'The total number of sL1D requests that missed on a cache
      line that was not already pending due to another request, per normalization
      unit. '
    Misses- Duplicated: The total number of sL1D requests that missed on a cache line
      that was already pending due to another request, per normalization unit.
    Read Req (Total): The total number of sL1D read requests of any size, per normalization
      unit.
    Atomic Req: The total number of atomic requests from sL1D to the L2, per normalization
      unit. Typically unused on current CDNA accelerators.
    Read Req (1 DWord): The total number of sL1D read requests made for a single dword
      of data (4B), per normalization unit.
    Read Req (2 DWord): The total number of sL1D read requests made for a two dwords
      of data (8B), per normalization unit.
    Read Req (4 DWord): The total number of sL1D read requests made for a four dwords
      of data (16B), per normalization unit.
    Read Req (8 DWord): The total number of sL1D read requests made for a eight dwords
      of data (32B), per normalization unit.
    Read Req (16 DWord): The total number of sL1D read requests made for a sixteen
      dwords of data (64B), per normalization unit.
    Read Req: The total number of read requests from sL1D to the L2 per normalization
      unit.
    Write Req: The total number of write requests from sL1D to the L2, per normalization
      unit. Typically unused on current CDNA accelerators.
    Stall Cycles: "The total number of cycles the sL1D\u2194L2 interface was stalled,\
      \ per normalization unit."
  data source:
  - metric_table:
      id: 1401
      title: Scalar L1D Speed-of-Light
      header:
        metric: Metric
        value: Avg
        unit: Unit
      metric:
        Bandwidth Utilization:
          value: AVG(((SQC_DCACHE_REQ * 100000) / (($max_sclk * $sqc_per_gpu) * (End_Timestamp
            - Start_Timestamp))))
          unit: Pct of Peak
        Cache Hit Rate:
          value: AVG((((SQC_DCACHE_HITS * 100) / (SQC_DCACHE_HITS + SQC_DCACHE_MISSES
            + SQC_DCACHE_MISSES_DUPLICATE)) if ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES
            + SQC_DCACHE_MISSES_DUPLICATE) != 0) else None))
          unit: Pct of Peak
        sL1D-L2 BW Utilization:
          value: AVG(((SQC_TC_DATA_READ_REQ + SQC_TC_DATA_WRITE_REQ + SQC_TC_DATA_ATOMIC_REQ)
            * 100000) / (2 * ($max_sclk * $sqc_per_gpu) * (End_Timestamp - Start_Timestamp)))
          unit: Pct of Peak
      comparable: false
      cli_style: simple_bar
      tui_style: simple_bar
  - metric_table:
      id: 1402
      title: Scalar L1D cache accesses
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        Req:
          avg: AVG((SQC_DCACHE_REQ / $denom))
          min: MIN((SQC_DCACHE_REQ / $denom))
          max: MAX((SQC_DCACHE_REQ / $denom))
          unit: (Req  + $normUnit)
        Hits:
          avg: AVG((SQC_DCACHE_HITS / $denom))
          min: MIN((SQC_DCACHE_HITS / $denom))
          max: MAX((SQC_DCACHE_HITS / $denom))
          unit: (Req  + $normUnit)
        Misses - Non Duplicated:
          avg: AVG((SQC_DCACHE_MISSES / $denom))
          min: MIN((SQC_DCACHE_MISSES / $denom))
          max: MAX((SQC_DCACHE_MISSES / $denom))
          unit: (Req  + $normUnit)
        Misses- Duplicated:
          avg: AVG((SQC_DCACHE_MISSES_DUPLICATE / $denom))
          min: MIN((SQC_DCACHE_MISSES_DUPLICATE / $denom))
          max: MAX((SQC_DCACHE_MISSES_DUPLICATE / $denom))
          unit: (Req  + $normUnit)
        Cache Hit Rate:
          avg: AVG((((100 * SQC_DCACHE_HITS) / ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE)) if (((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE) != 0) else None))
          min: MIN((((100 * SQC_DCACHE_HITS) / ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE)) if (((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE) != 0) else None))
          max: MAX((((100 * SQC_DCACHE_HITS) / ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE)) if (((SQC_DCACHE_HITS + SQC_DCACHE_MISSES)
            + SQC_DCACHE_MISSES_DUPLICATE) != 0) else None))
          unit: pct
        Read Req (Total):
          avg: AVG((((((SQC_DCACHE_REQ_READ_1 + SQC_DCACHE_REQ_READ_2) + SQC_DCACHE_REQ_READ_4)
            + SQC_DCACHE_REQ_READ_8) + SQC_DCACHE_REQ_READ_16) / $denom))
          min: MIN((((((SQC_DCACHE_REQ_READ_1 + SQC_DCACHE_REQ_READ_2) + SQC_DCACHE_REQ_READ_4)
            + SQC_DCACHE_REQ_READ_8) + SQC_DCACHE_REQ_READ_16) / $denom))
          max: MAX((((((SQC_DCACHE_REQ_READ_1 + SQC_DCACHE_REQ_READ_2) + SQC_DCACHE_REQ_READ_4)
            + SQC_DCACHE_REQ_READ_8) + SQC_DCACHE_REQ_READ_16) / $denom))
          unit: (Req  + $normUnit)
        Atomic Req:
          avg: AVG((SQC_DCACHE_ATOMIC / $denom))
          min: MIN((SQC_DCACHE_ATOMIC / $denom))
          max: MAX((SQC_DCACHE_ATOMIC / $denom))
          unit: (Req  + $normUnit)
        Read Req (1 DWord):
          avg: AVG((SQC_DCACHE_REQ_READ_1 / $denom))
          min: MIN((SQC_DCACHE_REQ_READ_1 / $denom))
          max: MAX((SQC_DCACHE_REQ_READ_1 / $denom))
          unit: (Req  + $normUnit)
        Read Req (2 DWord):
          avg: AVG((SQC_DCACHE_REQ_READ_2 / $denom))
          min: MIN((SQC_DCACHE_REQ_READ_2 / $denom))
          max: MAX((SQC_DCACHE_REQ_READ_2 / $denom))
          unit: (Req  + $normUnit)
        Read Req (4 DWord):
          avg: AVG((SQC_DCACHE_REQ_READ_4 / $denom))
          min: MIN((SQC_DCACHE_REQ_READ_4 / $denom))
          max: MAX((SQC_DCACHE_REQ_READ_4 / $denom))
          unit: (Req  + $normUnit)
        Read Req (8 DWord):
          avg: AVG((SQC_DCACHE_REQ_READ_8 / $denom))
          min: MIN((SQC_DCACHE_REQ_READ_8 / $denom))
          max: MAX((SQC_DCACHE_REQ_READ_8 / $denom))
          unit: (Req  + $normUnit)
        Read Req (16 DWord):
          avg: AVG((SQC_DCACHE_REQ_READ_16 / $denom))
          min: MIN((SQC_DCACHE_REQ_READ_16 / $denom))
          max: MAX((SQC_DCACHE_REQ_READ_16 / $denom))
          unit: (Req  + $normUnit)
  - metric_table:
      id: 1403
      title: Scalar L1D Cache - L2 Interface
      header:
        metric: Metric
        avg: Avg
        min: Min
        max: Max
        unit: Unit
      metric:
        sL1D-L2 BW:
          avg: AVG(((((SQC_TC_DATA_READ_REQ + SQC_TC_DATA_WRITE_REQ + SQC_TC_DATA_ATOMIC_REQ)
            * 64)) / (End_Timestamp - Start_Timestamp)))
          min: MIN(((((SQC_TC_DATA_READ_REQ + SQC_TC_DATA_WRITE_REQ + SQC_TC_DATA_ATOMIC_REQ)
            * 64)) / (End_Timestamp - Start_Timestamp)))
          max: MAX(((((SQC_TC_DATA_READ_REQ + SQC_TC_DATA_WRITE_REQ + SQC_TC_DATA_ATOMIC_REQ)
            * 64)) / (End_Timestamp - Start_Timestamp)))
          unit: Gbps
        Read Req:
          avg: AVG((SQC_TC_DATA_READ_REQ / $denom))
          min: MIN((SQC_TC_DATA_READ_REQ / $denom))
          max: MAX((SQC_TC_DATA_READ_REQ / $denom))
          unit: (Req  + $normUnit)
        Write Req:
          avg: AVG((SQC_TC_DATA_WRITE_REQ / $denom))
          min: MIN((SQC_TC_DATA_WRITE_REQ / $denom))
          max: MAX((SQC_TC_DATA_WRITE_REQ / $denom))
          unit: (Req  + $normUnit)
        Atomic Req:
          avg: AVG((SQC_TC_DATA_ATOMIC_REQ / $denom))
          min: MIN((SQC_TC_DATA_ATOMIC_REQ / $denom))
          max: MAX((SQC_TC_DATA_ATOMIC_REQ / $denom))
          unit: (Req  + $normUnit)
        Stall Cycles:
          avg: AVG((SQC_TC_STALL / $denom))
          min: MIN((SQC_TC_STALL / $denom))
          max: MAX((SQC_TC_STALL / $denom))
          unit: (Cycles  + $normUnit)
